// Generated by jextract

package org.unix;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
/**
 * {@snippet :
 * union {
 *     char __mbstate8[128];
 *     long long _mbstateL;
 * };
 * }
 */
public class __mbstate_t {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("__mbstate8"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("_mbstateL")
    );
    public static MemoryLayout $LAYOUT() {
        return __mbstate_t.$union$LAYOUT;
    }
    public static MemorySegment __mbstate8$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    static final VarHandle _mbstateL$VH = $union$LAYOUT.varHandle(PathElement.groupElement("_mbstateL"));
    public static VarHandle _mbstateL$VH() {
        return __mbstate_t._mbstateL$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long _mbstateL;
     * }
     */
    public static long _mbstateL$get(MemorySegment seg) {
        return (long)__mbstate_t._mbstateL$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long _mbstateL;
     * }
     */
    public static void _mbstateL$set(MemorySegment seg, long x) {
        __mbstate_t._mbstateL$VH.set(seg, x);
    }
    public static long _mbstateL$get(MemorySegment seg, long index) {
        return (long)__mbstate_t._mbstateL$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _mbstateL$set(MemorySegment seg, long index, long x) {
        __mbstate_t._mbstateL$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


