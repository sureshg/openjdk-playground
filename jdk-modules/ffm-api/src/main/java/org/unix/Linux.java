// Generated by jextract

package org.unix;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.*;
public class Linux extends Linux_1 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _FORTIFY_SOURCE 2
     * }
     */
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return (int)110500L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return (int)110600L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return (int)140600L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return (int)140700L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return (int)140800L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return (int)150300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return (int)150400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return (int)160000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return (int)160100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return (int)160200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return (int)160300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return (int)160400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return (int)140600L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return (int)140700L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return (int)150300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return (int)150400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return (int)160000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return (int)160100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return (int)160200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return (int)160300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return (int)160400L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return (int)70500L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return (int)70600L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return (int)80500L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return (int)90300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return (int)90400L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return (int)210000L;
    }
    /**
     * {@snippet :
     * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _USE_FORTIFY_LEVEL 2
     * }
     */
    public static int _USE_FORTIFY_LEVEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __HAS_FIXED_CHK_PROTOTYPES 1
     * }
     */
    public static int __HAS_FIXED_CHK_PROTOTYPES() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EPERM 1
     * }
     */
    public static int EPERM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ENOENT 2
     * }
     */
    public static int ENOENT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ESRCH 3
     * }
     */
    public static int ESRCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define EINTR 4
     * }
     */
    public static int EINTR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EIO 5
     * }
     */
    public static int EIO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ENXIO 6
     * }
     */
    public static int ENXIO() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define E2BIG 7
     * }
     */
    public static int E2BIG() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define ENOEXEC 8
     * }
     */
    public static int ENOEXEC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define EBADF 9
     * }
     */
    public static int EBADF() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define ECHILD 10
     * }
     */
    public static int ECHILD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define EDEADLK 11
     * }
     */
    public static int EDEADLK() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define ENOMEM 12
     * }
     */
    public static int ENOMEM() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define EACCES 13
     * }
     */
    public static int EACCES() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define EFAULT 14
     * }
     */
    public static int EFAULT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define ENOTBLK 15
     * }
     */
    public static int ENOTBLK() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define EBUSY 16
     * }
     */
    public static int EBUSY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define EEXIST 17
     * }
     */
    public static int EEXIST() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define EXDEV 18
     * }
     */
    public static int EXDEV() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define ENODEV 19
     * }
     */
    public static int ENODEV() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define ENOTDIR 20
     * }
     */
    public static int ENOTDIR() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define EISDIR 21
     * }
     */
    public static int EISDIR() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define EINVAL 22
     * }
     */
    public static int EINVAL() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define ENFILE 23
     * }
     */
    public static int ENFILE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define EMFILE 24
     * }
     */
    public static int EMFILE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define ENOTTY 25
     * }
     */
    public static int ENOTTY() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define ETXTBSY 26
     * }
     */
    public static int ETXTBSY() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define EFBIG 27
     * }
     */
    public static int EFBIG() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define ENOSPC 28
     * }
     */
    public static int ENOSPC() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define ESPIPE 29
     * }
     */
    public static int ESPIPE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define EROFS 30
     * }
     */
    public static int EROFS() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define EMLINK 31
     * }
     */
    public static int EMLINK() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define EPIPE 32
     * }
     */
    public static int EPIPE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define EDOM 33
     * }
     */
    public static int EDOM() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define ERANGE 34
     * }
     */
    public static int ERANGE() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define EAGAIN 35
     * }
     */
    public static int EAGAIN() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define EINPROGRESS 36
     * }
     */
    public static int EINPROGRESS() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define EALREADY 37
     * }
     */
    public static int EALREADY() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define ENOTSOCK 38
     * }
     */
    public static int ENOTSOCK() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define EDESTADDRREQ 39
     * }
     */
    public static int EDESTADDRREQ() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define EMSGSIZE 40
     * }
     */
    public static int EMSGSIZE() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define EPROTOTYPE 41
     * }
     */
    public static int EPROTOTYPE() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define ENOPROTOOPT 42
     * }
     */
    public static int ENOPROTOOPT() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define EPROTONOSUPPORT 43
     * }
     */
    public static int EPROTONOSUPPORT() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define ESOCKTNOSUPPORT 44
     * }
     */
    public static int ESOCKTNOSUPPORT() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define ENOTSUP 45
     * }
     */
    public static int ENOTSUP() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define EPFNOSUPPORT 46
     * }
     */
    public static int EPFNOSUPPORT() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define EAFNOSUPPORT 47
     * }
     */
    public static int EAFNOSUPPORT() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define EADDRINUSE 48
     * }
     */
    public static int EADDRINUSE() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define EADDRNOTAVAIL 49
     * }
     */
    public static int EADDRNOTAVAIL() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define ENETDOWN 50
     * }
     */
    public static int ENETDOWN() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define ENETUNREACH 51
     * }
     */
    public static int ENETUNREACH() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define ENETRESET 52
     * }
     */
    public static int ENETRESET() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define ECONNABORTED 53
     * }
     */
    public static int ECONNABORTED() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define ECONNRESET 54
     * }
     */
    public static int ECONNRESET() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define ENOBUFS 55
     * }
     */
    public static int ENOBUFS() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define EISCONN 56
     * }
     */
    public static int EISCONN() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define ENOTCONN 57
     * }
     */
    public static int ENOTCONN() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define ESHUTDOWN 58
     * }
     */
    public static int ESHUTDOWN() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define ETOOMANYREFS 59
     * }
     */
    public static int ETOOMANYREFS() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define ETIMEDOUT 60
     * }
     */
    public static int ETIMEDOUT() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define ECONNREFUSED 61
     * }
     */
    public static int ECONNREFUSED() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define ELOOP 62
     * }
     */
    public static int ELOOP() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define ENAMETOOLONG 63
     * }
     */
    public static int ENAMETOOLONG() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define EHOSTDOWN 64
     * }
     */
    public static int EHOSTDOWN() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define EHOSTUNREACH 65
     * }
     */
    public static int EHOSTUNREACH() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define ENOTEMPTY 66
     * }
     */
    public static int ENOTEMPTY() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define EPROCLIM 67
     * }
     */
    public static int EPROCLIM() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define EUSERS 68
     * }
     */
    public static int EUSERS() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * #define EDQUOT 69
     * }
     */
    public static int EDQUOT() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * #define ESTALE 70
     * }
     */
    public static int ESTALE() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define EREMOTE 71
     * }
     */
    public static int EREMOTE() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * #define EBADRPC 72
     * }
     */
    public static int EBADRPC() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * #define ERPCMISMATCH 73
     * }
     */
    public static int ERPCMISMATCH() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * #define EPROGUNAVAIL 74
     * }
     */
    public static int EPROGUNAVAIL() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define EPROGMISMATCH 75
     * }
     */
    public static int EPROGMISMATCH() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define EPROCUNAVAIL 76
     * }
     */
    public static int EPROCUNAVAIL() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * #define ENOLCK 77
     * }
     */
    public static int ENOLCK() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * #define ENOSYS 78
     * }
     */
    public static int ENOSYS() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * #define EFTYPE 79
     * }
     */
    public static int EFTYPE() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * #define EAUTH 80
     * }
     */
    public static int EAUTH() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * #define ENEEDAUTH 81
     * }
     */
    public static int ENEEDAUTH() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * #define EPWROFF 82
     * }
     */
    public static int EPWROFF() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * #define EDEVERR 83
     * }
     */
    public static int EDEVERR() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * #define EOVERFLOW 84
     * }
     */
    public static int EOVERFLOW() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * #define EBADEXEC 85
     * }
     */
    public static int EBADEXEC() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * #define EBADARCH 86
     * }
     */
    public static int EBADARCH() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * #define ESHLIBVERS 87
     * }
     */
    public static int ESHLIBVERS() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * #define EBADMACHO 88
     * }
     */
    public static int EBADMACHO() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * #define ECANCELED 89
     * }
     */
    public static int ECANCELED() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * #define EIDRM 90
     * }
     */
    public static int EIDRM() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * #define ENOMSG 91
     * }
     */
    public static int ENOMSG() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * #define EILSEQ 92
     * }
     */
    public static int EILSEQ() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * #define ENOATTR 93
     * }
     */
    public static int ENOATTR() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * #define EBADMSG 94
     * }
     */
    public static int EBADMSG() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * #define EMULTIHOP 95
     * }
     */
    public static int EMULTIHOP() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * #define ENODATA 96
     * }
     */
    public static int ENODATA() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * #define ENOLINK 97
     * }
     */
    public static int ENOLINK() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * #define ENOSR 98
     * }
     */
    public static int ENOSR() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * #define ENOSTR 99
     * }
     */
    public static int ENOSTR() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define EPROTO 100
     * }
     */
    public static int EPROTO() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define ETIME 101
     * }
     */
    public static int ETIME() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * #define EOPNOTSUPP 102
     * }
     */
    public static int EOPNOTSUPP() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * #define ENOPOLICY 103
     * }
     */
    public static int ENOPOLICY() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * #define ENOTRECOVERABLE 104
     * }
     */
    public static int ENOTRECOVERABLE() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * #define EOWNERDEAD 105
     * }
     */
    public static int EOWNERDEAD() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * #define EQFULL 106
     * }
     */
    public static int EQFULL() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * #define ELAST 106
     * }
     */
    public static int ELAST() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * #define IOCPARM_MASK 8191
     * }
     */
    public static int IOCPARM_MASK() {
        return (int)8191L;
    }
    /**
     * {@snippet :
     * #define TIOCM_LE 1
     * }
     */
    public static int TIOCM_LE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TIOCM_DTR 2
     * }
     */
    public static int TIOCM_DTR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define TIOCM_RTS 4
     * }
     */
    public static int TIOCM_RTS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define TIOCM_ST 8
     * }
     */
    public static int TIOCM_ST() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define TIOCM_SR 16
     * }
     */
    public static int TIOCM_SR() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define TIOCM_CTS 32
     * }
     */
    public static int TIOCM_CTS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define TIOCM_CAR 64
     * }
     */
    public static int TIOCM_CAR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define TIOCM_RNG 128
     * }
     */
    public static int TIOCM_RNG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define TIOCM_DSR 256
     * }
     */
    public static int TIOCM_DSR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_DATA 0
     * }
     */
    public static int TIOCPKT_DATA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_FLUSHREAD 1
     * }
     */
    public static int TIOCPKT_FLUSHREAD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_FLUSHWRITE 2
     * }
     */
    public static int TIOCPKT_FLUSHWRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_STOP 4
     * }
     */
    public static int TIOCPKT_STOP() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_START 8
     * }
     */
    public static int TIOCPKT_START() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_NOSTOP 16
     * }
     */
    public static int TIOCPKT_NOSTOP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_DOSTOP 32
     * }
     */
    public static int TIOCPKT_DOSTOP() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT_IOCTL 64
     * }
     */
    public static int TIOCPKT_IOCTL() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define TTYDISC 0
     * }
     */
    public static int TTYDISC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define TABLDISC 3
     * }
     */
    public static int TABLDISC() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SLIPDISC 4
     * }
     */
    public static int SLIPDISC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define PPPDISC 5
     * }
     */
    public static int PPPDISC() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SEEK_HOLE 3
     * }
     */
    public static int SEEK_HOLE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SEEK_DATA 4
     * }
     */
    public static int SEEK_DATA() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ACCESSX_MAX_DESCRIPTORS 100
     * }
     */
    public static int ACCESSX_MAX_DESCRIPTORS() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define _PC_LINK_MAX 1
     * }
     */
    public static int _PC_LINK_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _PC_MAX_CANON 2
     * }
     */
    public static int _PC_MAX_CANON() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _PC_MAX_INPUT 3
     * }
     */
    public static int _PC_MAX_INPUT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _PC_NAME_MAX 4
     * }
     */
    public static int _PC_NAME_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _PC_PATH_MAX 5
     * }
     */
    public static int _PC_PATH_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _PC_PIPE_BUF 6
     * }
     */
    public static int _PC_PIPE_BUF() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _PC_CHOWN_RESTRICTED 7
     * }
     */
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _PC_NO_TRUNC 8
     * }
     */
    public static int _PC_NO_TRUNC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _PC_VDISABLE 9
     * }
     */
    public static int _PC_VDISABLE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _PC_NAME_CHARS_MAX 10
     * }
     */
    public static int _PC_NAME_CHARS_MAX() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define _PC_CASE_SENSITIVE 11
     * }
     */
    public static int _PC_CASE_SENSITIVE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _PC_CASE_PRESERVING 12
     * }
     */
    public static int _PC_CASE_PRESERVING() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _PC_EXTENDED_SECURITY_NP 13
     * }
     */
    public static int _PC_EXTENDED_SECURITY_NP() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define _PC_AUTH_OPAQUE_NP 14
     * }
     */
    public static int _PC_AUTH_OPAQUE_NP() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _PC_2_SYMLINKS 15
     * }
     */
    public static int _PC_2_SYMLINKS() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define _PC_ALLOC_SIZE_MIN 16
     * }
     */
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _PC_ASYNC_IO 17
     * }
     */
    public static int _PC_ASYNC_IO() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define _PC_FILESIZEBITS 18
     * }
     */
    public static int _PC_FILESIZEBITS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define _PC_PRIO_IO 19
     * }
     */
    public static int _PC_PRIO_IO() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_INCR_XFER_SIZE 20
     * }
     */
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_MAX_XFER_SIZE 21
     * }
     */
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_MIN_XFER_SIZE 22
     * }
     */
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_XFER_ALIGN 23
     * }
     */
    public static int _PC_REC_XFER_ALIGN() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _PC_SYMLINK_MAX 24
     * }
     */
    public static int _PC_SYMLINK_MAX() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define _PC_SYNC_IO 25
     * }
     */
    public static int _PC_SYNC_IO() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _PC_XATTR_SIZE_BITS 26
     * }
     */
    public static int _PC_XATTR_SIZE_BITS() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define _PC_MIN_HOLE_SIZE 27
     * }
     */
    public static int _PC_MIN_HOLE_SIZE() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define _CS_PATH 1
     * }
     */
    public static int _CS_PATH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDIN_FILENO 0
     * }
     */
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define STDOUT_FILENO 1
     * }
     */
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDERR_FILENO 2
     * }
     */
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_VERSION 600
     * }
     */
    public static int _XOPEN_VERSION() {
        return (int)600L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XCU_VERSION 4
     * }
     */
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _SC_ARG_MAX 1
     * }
     */
    public static int _SC_ARG_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SC_CHILD_MAX 2
     * }
     */
    public static int _SC_CHILD_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _SC_CLK_TCK 3
     * }
     */
    public static int _SC_CLK_TCK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _SC_NGROUPS_MAX 4
     * }
     */
    public static int _SC_NGROUPS_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _SC_OPEN_MAX 5
     * }
     */
    public static int _SC_OPEN_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _SC_JOB_CONTROL 6
     * }
     */
    public static int _SC_JOB_CONTROL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _SC_SAVED_IDS 7
     * }
     */
    public static int _SC_SAVED_IDS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _SC_VERSION 8
     * }
     */
    public static int _SC_VERSION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_BASE_MAX 9
     * }
     */
    public static int _SC_BC_BASE_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_DIM_MAX 10
     * }
     */
    public static int _SC_BC_DIM_MAX() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_SCALE_MAX 11
     * }
     */
    public static int _SC_BC_SCALE_MAX() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_STRING_MAX 12
     * }
     */
    public static int _SC_BC_STRING_MAX() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _SC_COLL_WEIGHTS_MAX 13
     * }
     */
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define _SC_EXPR_NEST_MAX 14
     * }
     */
    public static int _SC_EXPR_NEST_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _SC_LINE_MAX 15
     * }
     */
    public static int _SC_LINE_MAX() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define _SC_RE_DUP_MAX 16
     * }
     */
    public static int _SC_RE_DUP_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _SC_2_VERSION 17
     * }
     */
    public static int _SC_2_VERSION() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define _SC_2_C_BIND 18
     * }
     */
    public static int _SC_2_C_BIND() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define _SC_2_C_DEV 19
     * }
     */
    public static int _SC_2_C_DEV() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define _SC_2_CHAR_TERM 20
     * }
     */
    public static int _SC_2_CHAR_TERM() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _SC_2_FORT_DEV 21
     * }
     */
    public static int _SC_2_FORT_DEV() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _SC_2_FORT_RUN 22
     * }
     */
    public static int _SC_2_FORT_RUN() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define _SC_2_LOCALEDEF 23
     * }
     */
    public static int _SC_2_LOCALEDEF() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _SC_2_SW_DEV 24
     * }
     */
    public static int _SC_2_SW_DEV() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define _SC_2_UPE 25
     * }
     */
    public static int _SC_2_UPE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _SC_STREAM_MAX 26
     * }
     */
    public static int _SC_STREAM_MAX() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define _SC_TZNAME_MAX 27
     * }
     */
    public static int _SC_TZNAME_MAX() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define _SC_ASYNCHRONOUS_IO 28
     * }
     */
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define _SC_PAGESIZE 29
     * }
     */
    public static int _SC_PAGESIZE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define _SC_MEMLOCK 30
     * }
     */
    public static int _SC_MEMLOCK() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _SC_MEMLOCK_RANGE 31
     * }
     */
    public static int _SC_MEMLOCK_RANGE() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define _SC_MEMORY_PROTECTION 32
     * }
     */
    public static int _SC_MEMORY_PROTECTION() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _SC_MESSAGE_PASSING 33
     * }
     */
    public static int _SC_MESSAGE_PASSING() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _SC_PRIORITIZED_IO 34
     * }
     */
    public static int _SC_PRIORITIZED_IO() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define _SC_PRIORITY_SCHEDULING 35
     * }
     */
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define _SC_REALTIME_SIGNALS 36
     * }
     */
    public static int _SC_REALTIME_SIGNALS() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define _SC_SEMAPHORES 37
     * }
     */
    public static int _SC_SEMAPHORES() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define _SC_FSYNC 38
     * }
     */
    public static int _SC_FSYNC() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define _SC_SHARED_MEMORY_OBJECTS 39
     * }
     */
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define _SC_SYNCHRONIZED_IO 40
     * }
     */
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define _SC_TIMERS 41
     * }
     */
    public static int _SC_TIMERS() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define _SC_AIO_LISTIO_MAX 42
     * }
     */
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define _SC_AIO_MAX 43
     * }
     */
    public static int _SC_AIO_MAX() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define _SC_AIO_PRIO_DELTA_MAX 44
     * }
     */
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define _SC_DELAYTIMER_MAX 45
     * }
     */
    public static int _SC_DELAYTIMER_MAX() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define _SC_MQ_OPEN_MAX 46
     * }
     */
    public static int _SC_MQ_OPEN_MAX() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define _SC_MAPPED_FILES 47
     * }
     */
    public static int _SC_MAPPED_FILES() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define _SC_RTSIG_MAX 48
     * }
     */
    public static int _SC_RTSIG_MAX() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define _SC_SEM_NSEMS_MAX 49
     * }
     */
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define _SC_SEM_VALUE_MAX 50
     * }
     */
    public static int _SC_SEM_VALUE_MAX() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define _SC_SIGQUEUE_MAX 51
     * }
     */
    public static int _SC_SIGQUEUE_MAX() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define _SC_TIMER_MAX 52
     * }
     */
    public static int _SC_TIMER_MAX() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define _SC_NPROCESSORS_CONF 57
     * }
     */
    public static int _SC_NPROCESSORS_CONF() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define _SC_NPROCESSORS_ONLN 58
     * }
     */
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS 59
     * }
     */
    public static int _SC_2_PBS() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_ACCOUNTING 60
     * }
     */
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_CHECKPOINT 61
     * }
     */
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_LOCATE 62
     * }
     */
    public static int _SC_2_PBS_LOCATE() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_MESSAGE 63
     * }
     */
    public static int _SC_2_PBS_MESSAGE() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_TRACK 64
     * }
     */
    public static int _SC_2_PBS_TRACK() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define _SC_ADVISORY_INFO 65
     * }
     */
    public static int _SC_ADVISORY_INFO() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define _SC_BARRIERS 66
     * }
     */
    public static int _SC_BARRIERS() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define _SC_CLOCK_SELECTION 67
     * }
     */
    public static int _SC_CLOCK_SELECTION() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define _SC_CPUTIME 68
     * }
     */
    public static int _SC_CPUTIME() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * #define _SC_FILE_LOCKING 69
     * }
     */
    public static int _SC_FILE_LOCKING() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * #define _SC_GETGR_R_SIZE_MAX 70
     * }
     */
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define _SC_GETPW_R_SIZE_MAX 71
     * }
     */
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * #define _SC_HOST_NAME_MAX 72
     * }
     */
    public static int _SC_HOST_NAME_MAX() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * #define _SC_LOGIN_NAME_MAX 73
     * }
     */
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * #define _SC_MONOTONIC_CLOCK 74
     * }
     */
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define _SC_MQ_PRIO_MAX 75
     * }
     */
    public static int _SC_MQ_PRIO_MAX() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define _SC_READER_WRITER_LOCKS 76
     * }
     */
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * #define _SC_REGEXP 77
     * }
     */
    public static int _SC_REGEXP() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * #define _SC_SHELL 78
     * }
     */
    public static int _SC_SHELL() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * #define _SC_SPAWN 79
     * }
     */
    public static int _SC_SPAWN() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * #define _SC_SPIN_LOCKS 80
     * }
     */
    public static int _SC_SPIN_LOCKS() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * #define _SC_SPORADIC_SERVER 81
     * }
     */
    public static int _SC_SPORADIC_SERVER() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_ATTR_STACKADDR 82
     * }
     */
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_ATTR_STACKSIZE 83
     * }
     */
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_CPUTIME 84
     * }
     */
    public static int _SC_THREAD_CPUTIME() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_DESTRUCTOR_ITERATIONS 85
     * }
     */
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_KEYS_MAX 86
     * }
     */
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PRIO_INHERIT 87
     * }
     */
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PRIO_PROTECT 88
     * }
     */
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PRIORITY_SCHEDULING 89
     * }
     */
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PROCESS_SHARED 90
     * }
     */
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_SAFE_FUNCTIONS 91
     * }
     */
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_SPORADIC_SERVER 92
     * }
     */
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_STACK_MIN 93
     * }
     */
    public static int _SC_THREAD_STACK_MIN() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_THREADS_MAX 94
     * }
     */
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * #define _SC_TIMEOUTS 95
     * }
     */
    public static int _SC_TIMEOUTS() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * #define _SC_THREADS 96
     * }
     */
    public static int _SC_THREADS() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE 97
     * }
     */
    public static int _SC_TRACE() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_EVENT_FILTER 98
     * }
     */
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_INHERIT 99
     * }
     */
    public static int _SC_TRACE_INHERIT() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_LOG 100
     * }
     */
    public static int _SC_TRACE_LOG() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define _SC_TTY_NAME_MAX 101
     * }
     */
    public static int _SC_TTY_NAME_MAX() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * #define _SC_TYPED_MEMORY_OBJECTS 102
     * }
     */
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_ILP32_OFF32 103
     * }
     */
    public static int _SC_V6_ILP32_OFF32() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_ILP32_OFFBIG 104
     * }
     */
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_LP64_OFF64 105
     * }
     */
    public static int _SC_V6_LP64_OFF64() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_LPBIG_OFFBIG 106
     * }
     */
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * #define _SC_IPV6 118
     * }
     */
    public static int _SC_IPV6() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * #define _SC_RAW_SOCKETS 119
     * }
     */
    public static int _SC_RAW_SOCKETS() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * #define _SC_SYMLOOP_MAX 120
     * }
     */
    public static int _SC_SYMLOOP_MAX() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * #define _SC_ATEXIT_MAX 107
     * }
     */
    public static int _SC_ATEXIT_MAX() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * #define _SC_IOV_MAX 56
     * }
     */
    public static int _SC_IOV_MAX() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_CRYPT 108
     * }
     */
    public static int _SC_XOPEN_CRYPT() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_ENH_I18N 109
     * }
     */
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_LEGACY 110
     * }
     */
    public static int _SC_XOPEN_LEGACY() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_REALTIME 111
     * }
     */
    public static int _SC_XOPEN_REALTIME() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_REALTIME_THREADS 112
     * }
     */
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_SHM 113
     * }
     */
    public static int _SC_XOPEN_SHM() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_STREAMS 114
     * }
     */
    public static int _SC_XOPEN_STREAMS() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_UNIX 115
     * }
     */
    public static int _SC_XOPEN_UNIX() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_VERSION 116
     * }
     */
    public static int _SC_XOPEN_VERSION() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_XCU_VERSION 121
     * }
     */
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_ILP32_OFF32 122
     * }
     */
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_ILP32_OFFBIG 123
     * }
     */
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_LP64_OFF64 124
     * }
     */
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_LPBIG_OFFBIG 125
     * }
     */
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * #define _SC_SS_REPL_MAX 126
     * }
     */
    public static int _SC_SS_REPL_MAX() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_EVENT_NAME_MAX 127
     * }
     */
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_NAME_MAX 128
     * }
     */
    public static int _SC_TRACE_NAME_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_SYS_MAX 129
     * }
     */
    public static int _SC_TRACE_SYS_MAX() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_USER_EVENT_MAX 130
     * }
     */
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * #define _SC_PASS_MAX 131
     * }
     */
    public static int _SC_PASS_MAX() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * #define _SC_PHYS_PAGES 200
     * }
     */
    public static int _SC_PHYS_PAGES() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFF32_LIBS 4
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LP64_OFF64_CFLAGS 8
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LP64_OFF64_LIBS 10
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14
     * }
     */
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_CFLAGS 20
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_LDFLAGS 21
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_LIBS 22
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_LINTFLAGS 23
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_CFLAGS 24
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_LIBS 26
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_CFLAGS 28
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_LDFLAGS 29
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_LIBS 30
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_LINTFLAGS 31
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_LIBS 34
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define _CS_DARWIN_USER_DIR 65536
     * }
     */
    public static int _CS_DARWIN_USER_DIR() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define _CS_DARWIN_USER_TEMP_DIR 65537
     * }
     */
    public static int _CS_DARWIN_USER_TEMP_DIR() {
        return (int)65537L;
    }
    /**
     * {@snippet :
     * #define _CS_DARWIN_USER_CACHE_DIR 65538
     * }
     */
    public static int _CS_DARWIN_USER_CACHE_DIR() {
        return (int)65538L;
    }
    /**
     * {@snippet :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_FD_SETSIZE 1024
     * }
     */
    public static int __DARWIN_FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NBBY 8
     * }
     */
    public static int __DARWIN_NBBY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SYNC_VOLUME_FULLSYNC 1
     * }
     */
    public static int SYNC_VOLUME_FULLSYNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SYNC_VOLUME_WAIT 2
     * }
     */
    public static int SYNC_VOLUME_WAIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_intptr_t;
     * }
     */
    public static final OfLong __darwin_intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_natural_t;
     * }
     */
    public static final OfInt __darwin_natural_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_ct_rune_t;
     * }
     */
    public static final OfInt __darwin_ct_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ptrdiff_t;
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_size_t;
     * }
     */
    public static final OfLong __darwin_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* __darwin_va_list;
     * }
     */
    public static final AddressLayout __darwin_va_list = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int __darwin_wchar_t;
     * }
     */
    public static final OfInt __darwin_wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_rune_t;
     * }
     */
    public static final OfInt __darwin_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wint_t;
     * }
     */
    public static final OfInt __darwin_wint_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_clock_t;
     * }
     */
    public static final OfLong __darwin_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_socklen_t;
     * }
     */
    public static final OfInt __darwin_socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ssize_t;
     * }
     */
    public static final OfLong __darwin_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_time_t;
     * }
     */
    public static final OfLong __darwin_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __darwin_blkcnt_t;
     * }
     */
    public static final OfLong __darwin_blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_blksize_t;
     * }
     */
    public static final OfInt __darwin_blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_dev_t;
     * }
     */
    public static final OfInt __darwin_dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsblkcnt_t;
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsfilcnt_t;
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_gid_t;
     * }
     */
    public static final OfInt __darwin_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_id_t;
     * }
     */
    public static final OfInt __darwin_id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino64_t;
     * }
     */
    public static final OfLong __darwin_ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino_t;
     * }
     */
    public static final OfLong __darwin_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_name_t;
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_t;
     * }
     */
    public static final OfInt __darwin_mach_port_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __darwin_mode_t;
     * }
     */
    public static final OfShort __darwin_mode_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long long __darwin_off_t;
     * }
     */
    public static final OfLong __darwin_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_pid_t;
     * }
     */
    public static final OfInt __darwin_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_sigset_t;
     * }
     */
    public static final OfInt __darwin_sigset_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_suseconds_t;
     * }
     */
    public static final OfInt __darwin_suseconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_uid_t;
     * }
     */
    public static final OfInt __darwin_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_useconds_t;
     * }
     */
    public static final OfInt __darwin_useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_pthread_key_t;
     * }
     */
    public static final OfLong __darwin_pthread_key_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _opaque_pthread_t* __darwin_pthread_t;
     * }
     */
    public static final AddressLayout __darwin_pthread_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef int __darwin_nl_item;
     * }
     */
    public static final OfInt __darwin_nl_item = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wctrans_t;
     * }
     */
    public static final OfInt __darwin_wctrans_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_wctype_t;
     * }
     */
    public static final OfInt __darwin_wctype_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"memchr");
    }
    /**
     * {@snippet :
     * void* memchr(void* __s, int __c, size_t __n);
     * }
     */
    public static MemorySegment memchr(MemorySegment __s, int __c, long __n) {
        var mh$ = memchr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1,"memcmp");
    }
    /**
     * {@snippet :
     * int memcmp(void* __s1, void* __s2, size_t __n);
     * }
     */
    public static int memcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"memcpy");
    }
    /**
     * {@snippet :
     * void* memcpy(void* __dst, void* __src, size_t __n);
     * }
     */
    public static MemorySegment memcpy(MemorySegment __dst, MemorySegment __src, long __n) {
        var mh$ = memcpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4,"memmove");
    }
    /**
     * {@snippet :
     * void* memmove(void* __dst, void* __src, size_t __len);
     * }
     */
    public static MemorySegment memmove(MemorySegment __dst, MemorySegment __src, long __len) {
        var mh$ = memmove$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"memset");
    }
    /**
     * {@snippet :
     * void* memset(void* __b, int __c, size_t __len);
     * }
     */
    public static MemorySegment memset(MemorySegment __b, int __c, long __len) {
        var mh$ = memset$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__b, __c, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"strcat");
    }
    /**
     * {@snippet :
     * char* strcat(char* __s1, char* __s2);
     * }
     */
    public static MemorySegment strcat(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"strchr");
    }
    /**
     * {@snippet :
     * char* strchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strchr(MemorySegment __s, int __c) {
        var mh$ = strchr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$5,"strcmp");
    }
    /**
     * {@snippet :
     * int strcmp(char* __s1, char* __s2);
     * }
     */
    public static int strcmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$0,"strcoll");
    }
    /**
     * {@snippet :
     * int strcoll(char* __s1, char* __s2);
     * }
     */
    public static int strcoll(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"strcpy");
    }
    /**
     * {@snippet :
     * char* strcpy(char* __dst, char* __src);
     * }
     */
    public static MemorySegment strcpy(MemorySegment __dst, MemorySegment __src) {
        var mh$ = strcpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"strcspn");
    }
    /**
     * {@snippet :
     * unsigned long strcspn(char* __s, char* __charset);
     * }
     */
    public static long strcspn(MemorySegment __s, MemorySegment __charset) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$5,"strerror");
    }
    /**
     * {@snippet :
     * char* strerror(int __errnum);
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"strlen");
    }
    /**
     * {@snippet :
     * unsigned long strlen(char* __s);
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"strncat");
    }
    /**
     * {@snippet :
     * char* strncat(char* __s1, char* __s2, size_t __n);
     * }
     */
    public static MemorySegment strncat(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"strncmp");
    }
    /**
     * {@snippet :
     * int strncmp(char* __s1, char* __s2, size_t __n);
     * }
     */
    public static int strncmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"strncpy");
    }
    /**
     * {@snippet :
     * char* strncpy(char* __dst, char* __src, size_t __n);
     * }
     */
    public static MemorySegment strncpy(MemorySegment __dst, MemorySegment __src, long __n) {
        var mh$ = strncpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"strpbrk");
    }
    /**
     * {@snippet :
     * char* strpbrk(char* __s, char* __charset);
     * }
     */
    public static MemorySegment strpbrk(MemorySegment __s, MemorySegment __charset) {
        var mh$ = strpbrk$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s, __charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"strrchr");
    }
    /**
     * {@snippet :
     * char* strrchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strrchr(MemorySegment __s, int __c) {
        var mh$ = strrchr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"strspn");
    }
    /**
     * {@snippet :
     * unsigned long strspn(char* __s, char* __charset);
     * }
     */
    public static long strspn(MemorySegment __s, MemorySegment __charset) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __charset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"strstr");
    }
    /**
     * {@snippet :
     * char* strstr(char* __big, char* __little);
     * }
     */
    public static MemorySegment strstr(MemorySegment __big, MemorySegment __little) {
        var mh$ = strstr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__big, __little);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"strtok");
    }
    /**
     * {@snippet :
     * char* strtok(char* __str, char* __sep);
     * }
     */
    public static MemorySegment strtok(MemorySegment __str, MemorySegment __sep) {
        var mh$ = strtok$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__str, __sep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"strxfrm");
    }
    /**
     * {@snippet :
     * unsigned long strxfrm(char* __s1, char* __s2, size_t __n);
     * }
     */
    public static long strxfrm(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"strtok_r");
    }
    /**
     * {@snippet :
     * char* strtok_r(char* __str, char* __sep, char** __lasts);
     * }
     */
    public static MemorySegment strtok_r(MemorySegment __str, MemorySegment __sep, MemorySegment __lasts) {
        var mh$ = strtok_r$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__str, __sep, __lasts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"strerror_r");
    }
    /**
     * {@snippet :
     * int strerror_r(int __errnum, char* __strerrbuf, size_t __buflen);
     * }
     */
    public static int strerror_r(int __errnum, MemorySegment __strerrbuf, long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __strerrbuf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"strdup");
    }
    /**
     * {@snippet :
     * char* strdup(char* __s1);
     * }
     */
    public static MemorySegment strdup(MemorySegment __s1) {
        var mh$ = strdup$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"memccpy");
    }
    /**
     * {@snippet :
     * void* memccpy(void* __dst, void* __src, int __c, size_t __n);
     * }
     */
    public static MemorySegment memccpy(MemorySegment __dst, MemorySegment __src, int __c, long __n) {
        var mh$ = memccpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"stpcpy");
    }
    /**
     * {@snippet :
     * char* stpcpy(char* __dst, char* __src);
     * }
     */
    public static MemorySegment stpcpy(MemorySegment __dst, MemorySegment __src) {
        var mh$ = stpcpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"stpncpy");
    }
    /**
     * {@snippet :
     * char* stpncpy(char* __dst, char* __src, size_t __n);
     * }
     */
    public static MemorySegment stpncpy(MemorySegment __dst, MemorySegment __src, long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dst, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"strndup");
    }
    /**
     * {@snippet :
     * char* strndup(char* __s1, size_t __n);
     * }
     */
    public static MemorySegment strndup(MemorySegment __s1, long __n) {
        var mh$ = strndup$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s1, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"strnlen");
    }
    /**
     * {@snippet :
     * size_t strnlen(char* __s1, size_t __n);
     * }
     */
    public static long strnlen(MemorySegment __s1, long __n) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__s1, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"strsignal");
    }
    /**
     * {@snippet :
     * char* strsignal(int __sig);
     * }
     */
    public static MemorySegment strsignal(int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_addr_t;
     * }
     */
    public static final OfLong user_addr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_size_t;
     * }
     */
    public static final OfLong user_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_ssize_t;
     * }
     */
    public static final OfLong user_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_long_t;
     * }
     */
    public static final OfLong user_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_ulong_t;
     * }
     */
    public static final OfLong user_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_time_t;
     * }
     */
    public static final OfLong user_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_off_t;
     * }
     */
    public static final OfLong user_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long syscall_arg_t;
     * }
     */
    public static final OfLong syscall_arg_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long rsize_t;
     * }
     */
    public static final OfLong rsize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int errno_t;
     * }
     */
    public static final OfInt errno_t = JAVA_INT;
    public static MethodHandle memset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"memset_s");
    }
    /**
     * {@snippet :
     * errno_t memset_s(void* __s, rsize_t __smax, int __c, rsize_t __n);
     * }
     */
    public static int memset_s(MemorySegment __s, long __smax, int __c, long __n) {
        var mh$ = memset_s$MH();
        try {
            return (int)mh$.invokeExact(__s, __smax, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MethodHandle memmem$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$6,"memmem");
    }
    /**
     * {@snippet :
     * void* memmem(void* __big, size_t __big_len, void* __little, size_t __little_len);
     * }
     */
    public static MemorySegment memmem(MemorySegment __big, long __big_len, MemorySegment __little, long __little_len) {
        var mh$ = memmem$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__big, __big_len, __little, __little_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset_pattern4$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"memset_pattern4");
    }
    /**
     * {@snippet :
     * void memset_pattern4(void* __b, void* __pattern4, size_t __len);
     * }
     */
    public static void memset_pattern4(MemorySegment __b, MemorySegment __pattern4, long __len) {
        var mh$ = memset_pattern4$MH();
        try {
            mh$.invokeExact(__b, __pattern4, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset_pattern8$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"memset_pattern8");
    }
    /**
     * {@snippet :
     * void memset_pattern8(void* __b, void* __pattern8, size_t __len);
     * }
     */
    public static void memset_pattern8(MemorySegment __b, MemorySegment __pattern8, long __len) {
        var mh$ = memset_pattern8$MH();
        try {
            mh$.invokeExact(__b, __pattern8, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset_pattern16$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"memset_pattern16");
    }
    /**
     * {@snippet :
     * void memset_pattern16(void* __b, void* __pattern16, size_t __len);
     * }
     */
    public static void memset_pattern16(MemorySegment __b, MemorySegment __pattern16, long __len) {
        var mh$ = memset_pattern16$MH();
        try {
            mh$.invokeExact(__b, __pattern16, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasestr$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"strcasestr");
    }
    /**
     * {@snippet :
     * char* strcasestr(char* __big, char* __little);
     * }
     */
    public static MemorySegment strcasestr(MemorySegment __big, MemorySegment __little) {
        var mh$ = strcasestr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__big, __little);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnstr$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"strnstr");
    }
    /**
     * {@snippet :
     * char* strnstr(char* __big, char* __little, size_t __len);
     * }
     */
    public static MemorySegment strnstr(MemorySegment __big, MemorySegment __little, long __len) {
        var mh$ = strnstr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__big, __little, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"strlcat");
    }
    /**
     * {@snippet :
     * unsigned long strlcat(char* __dst, char* __source, size_t __size);
     * }
     */
    public static long strlcat(MemorySegment __dst, MemorySegment __source, long __size) {
        var mh$ = strlcat$MH();
        try {
            return (long)mh$.invokeExact(__dst, __source, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"strlcpy");
    }
    /**
     * {@snippet :
     * unsigned long strlcpy(char* __dst, char* __source, size_t __size);
     * }
     */
    public static long strlcpy(MemorySegment __dst, MemorySegment __source, long __size) {
        var mh$ = strlcpy$MH();
        try {
            return (long)mh$.invokeExact(__dst, __source, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strmode$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"strmode");
    }
    /**
     * {@snippet :
     * void strmode(int __mode, char* __bp);
     * }
     */
    public static void strmode(int __mode, MemorySegment __bp) {
        var mh$ = strmode$MH();
        try {
            mh$.invokeExact(__mode, __bp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"strsep");
    }
    /**
     * {@snippet :
     * char* strsep(char** __stringp, char* __delim);
     * }
     */
    public static MemorySegment strsep(MemorySegment __stringp, MemorySegment __delim) {
        var mh$ = strsep$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"swab");
    }
    /**
     * {@snippet :
     * void swab(void*, void*, ssize_t);
     * }
     */
    public static void swab(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timingsafe_bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"timingsafe_bcmp");
    }
    /**
     * {@snippet :
     * int timingsafe_bcmp(void* __b1, void* __b2, size_t __len);
     * }
     */
    public static int timingsafe_bcmp(MemorySegment __b1, MemorySegment __b2, long __len) {
        var mh$ = timingsafe_bcmp$MH();
        try {
            return (int)mh$.invokeExact(__b1, __b2, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"strsignal_r");
    }
    /**
     * {@snippet :
     * int strsignal_r(int __sig, char* __strsignalbuf, size_t __buflen);
     * }
     */
    public static int strsignal_r(int __sig, MemorySegment __strsignalbuf, long __buflen) {
        var mh$ = strsignal_r$MH();
        try {
            return (int)mh$.invokeExact(__sig, __strsignalbuf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"bcmp");
    }
    /**
     * {@snippet :
     * int bcmp(void*, void*, size_t);
     * }
     */
    public static int bcmp(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"bcopy");
    }
    /**
     * {@snippet :
     * void bcopy(void*, void*, size_t);
     * }
     */
    public static void bcopy(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"bzero");
    }
    /**
     * {@snippet :
     * void bzero(void*, size_t);
     * }
     */
    public static void bzero(MemorySegment x0, long x1) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"index");
    }
    /**
     * {@snippet :
     * char* index(char*, int);
     * }
     */
    public static MemorySegment index(MemorySegment x0, int x1) {
        var mh$ = index$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"rindex");
    }
    /**
     * {@snippet :
     * char* rindex(char*, int);
     * }
     */
    public static MemorySegment rindex(MemorySegment x0, int x1) {
        var mh$ = rindex$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"ffs");
    }
    /**
     * {@snippet :
     * int ffs(int);
     * }
     */
    public static int ffs(int x0) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"strcasecmp");
    }
    /**
     * {@snippet :
     * int strcasecmp(char*, char*);
     * }
     */
    public static int strcasecmp(MemorySegment x0, MemorySegment x1) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"strncasecmp");
    }
    /**
     * {@snippet :
     * int strncasecmp(char*, char*, size_t);
     * }
     */
    public static int strncasecmp(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"ffsl");
    }
    /**
     * {@snippet :
     * int ffsl(long);
     * }
     */
    public static int ffsl(long x0) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"ffsll");
    }
    /**
     * {@snippet :
     * int ffsll(long long);
     * }
     */
    public static int ffsll(long x0) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fls$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"fls");
    }
    /**
     * {@snippet :
     * int fls(int);
     * }
     */
    public static int fls(int x0) {
        var mh$ = fls$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flsl$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"flsl");
    }
    /**
     * {@snippet :
     * int flsl(long);
     * }
     */
    public static int flsl(long x0) {
        var mh$ = flsl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flsll$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"flsll");
    }
    /**
     * {@snippet :
     * int flsll(long long);
     * }
     */
    public static int flsll(long x0) {
        var mh$ = flsll$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __error$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"__error");
    }
    /**
     * {@snippet :
     * int* __error();
     * }
     */
    public static MemorySegment __error() {
        var mh$ = __error$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ioctl$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"ioctl");
    }
    /**
     * {@snippet :
     * int ioctl(int, unsigned long,...);
     * }
     */
    public static int ioctl(int x0, long x1, Object... x2) {
        var mh$ = ioctl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    public static MethodHandle getattrlistbulk$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$6,"getattrlistbulk");
    }
    /**
     * {@snippet :
     * int getattrlistbulk(int, void*, void*, size_t, uint64_t);
     * }
     */
    public static int getattrlistbulk(int x0, MemorySegment x1, MemorySegment x2, long x3, long x4) {
        var mh$ = getattrlistbulk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrlistat$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"getattrlistat");
    }
    /**
     * {@snippet :
     * int getattrlistat(int, char*, void*, void*, size_t, unsigned long);
     * }
     */
    public static int getattrlistat(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, long x5) {
        var mh$ = getattrlistat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setattrlistat$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"setattrlistat");
    }
    /**
     * {@snippet :
     * int setattrlistat(int, char*, void*, void*, size_t, uint32_t);
     * }
     */
    public static int setattrlistat(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = setattrlistat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freadlink$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"freadlink");
    }
    /**
     * {@snippet :
     * ssize_t freadlink(int, char*, size_t);
     * }
     */
    public static long freadlink(int x0, MemorySegment x1, long x2) {
        var mh$ = freadlink$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"faccessat");
    }
    /**
     * {@snippet :
     * int faccessat(int, char*, int, int);
     * }
     */
    public static int faccessat(int x0, MemorySegment x1, int x2, int x3) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"fchownat");
    }
    /**
     * {@snippet :
     * int fchownat(int, char*, uid_t, gid_t, int);
     * }
     */
    public static int fchownat(int x0, MemorySegment x1, int x2, int x3, int x4) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"linkat");
    }
    /**
     * {@snippet :
     * int linkat(int, char*, int, char*, int);
     * }
     */
    public static int linkat(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"readlinkat");
    }
    /**
     * {@snippet :
     * ssize_t readlinkat(int, char*, char*, size_t);
     * }
     */
    public static long readlinkat(int x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3,"symlinkat");
    }
    /**
     * {@snippet :
     * int symlinkat(char*, int, char*);
     * }
     */
    public static int symlinkat(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"unlinkat");
    }
    /**
     * {@snippet :
     * int unlinkat(int, char*, int);
     * }
     */
    public static int unlinkat(int x0, MemorySegment x1, int x2) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int useconds_t;
     * }
     */
    public static final OfInt useconds_t = JAVA_INT;
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"_exit");
    }
    /**
     * {@snippet :
     * void _exit(int);
     * }
     */
    public static void _exit(int x0) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"access");
    }
    /**
     * {@snippet :
     * int access(char*, int);
     * }
     */
    public static int access(MemorySegment x0, int x1) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"alarm");
    }
    /**
     * {@snippet :
     * unsigned int alarm(unsigned int);
     * }
     */
    public static int alarm(int x0) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$6,"chdir");
    }
    /**
     * {@snippet :
     * int chdir(char*);
     * }
     */
    public static int chdir(MemorySegment x0) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"chown");
    }
    /**
     * {@snippet :
     * int chown(char*, uid_t, gid_t);
     * }
     */
    public static int chown(MemorySegment x0, int x1, int x2) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"close");
    }
    /**
     * {@snippet :
     * int close(int);
     * }
     */
    public static int close(int x0) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"dup");
    }
    /**
     * {@snippet :
     * int dup(int);
     * }
     */
    public static int dup(int x0) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"dup2");
    }
    /**
     * {@snippet :
     * int dup2(int, int);
     * }
     */
    public static int dup2(int x0, int x1) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"execl");
    }
    /**
     * {@snippet :
     * int execl(char* __path, char* __arg0,...);
     * }
     */
    public static int execl(MemorySegment __path, MemorySegment __arg0, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"execle");
    }
    /**
     * {@snippet :
     * int execle(char* __path, char* __arg0,...);
     * }
     */
    public static int execle(MemorySegment __path, MemorySegment __arg0, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"execlp");
    }
    /**
     * {@snippet :
     * int execlp(char* __file, char* __arg0,...);
     * }
     */
    public static int execlp(MemorySegment __file, MemorySegment __arg0, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"execv");
    }
    /**
     * {@snippet :
     * int execv(char* __path, char** __argv);
     * }
     */
    public static int execv(MemorySegment __path, MemorySegment __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"execve");
    }
    /**
     * {@snippet :
     * int execve(char* __file, char** __argv, char** __envp);
     * }
     */
    public static int execve(MemorySegment __file, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"execvp");
    }
    /**
     * {@snippet :
     * int execvp(char* __file, char** __argv);
     * }
     */
    public static int execvp(MemorySegment __file, MemorySegment __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$2,"fork");
    }
    /**
     * {@snippet :
     * pid_t fork();
     * }
     */
    public static int fork() {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"fpathconf");
    }
    /**
     * {@snippet :
     * long fpathconf(int, int);
     * }
     */
    public static long fpathconf(int x0, int x1) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"getcwd");
    }
    /**
     * {@snippet :
     * char* getcwd(char*, size_t);
     * }
     */
    public static MemorySegment getcwd(MemorySegment x0, long x1) {
        var mh$ = getcwd$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"getegid");
    }
    /**
     * {@snippet :
     * gid_t getegid();
     * }
     */
    public static int getegid() {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"geteuid");
    }
    /**
     * {@snippet :
     * uid_t geteuid();
     * }
     */
    public static int geteuid() {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"getgid");
    }
    /**
     * {@snippet :
     * gid_t getgid();
     * }
     */
    public static int getgid() {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"getgroups");
    }
    /**
     * {@snippet :
     * int getgroups(int, gid_t []);
     * }
     */
    public static int getgroups(int x0, MemorySegment x1) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"getlogin");
    }
    /**
     * {@snippet :
     * char* getlogin();
     * }
     */
    public static MemorySegment getlogin() {
        var mh$ = getlogin$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"getpgrp");
    }
    /**
     * {@snippet :
     * pid_t getpgrp();
     * }
     */
    public static int getpgrp() {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"getpid");
    }
    /**
     * {@snippet :
     * pid_t getpid();
     * }
     */
    public static int getpid() {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"getppid");
    }
    /**
     * {@snippet :
     * pid_t getppid();
     * }
     */
    public static int getppid() {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"getuid");
    }
    /**
     * {@snippet :
     * uid_t getuid();
     * }
     */
    public static int getuid() {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"isatty");
    }
    /**
     * {@snippet :
     * int isatty(int);
     * }
     */
    public static int isatty(int x0) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"link");
    }
    /**
     * {@snippet :
     * int link(char*, char*);
     * }
     */
    public static int link(MemorySegment x0, MemorySegment x1) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"lseek");
    }
    /**
     * {@snippet :
     * off_t lseek(int, off_t, int);
     * }
     */
    public static long lseek(int x0, long x1, int x2) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"pathconf");
    }
    /**
     * {@snippet :
     * long pathconf(char*, int);
     * }
     */
    public static long pathconf(MemorySegment x0, int x1) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"pause");
    }
    /**
     * {@snippet :
     * int pause();
     * }
     */
    public static int pause() {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"pipe");
    }
    /**
     * {@snippet :
     * int pipe(int [2]);
     * }
     */
    public static int pipe(MemorySegment x0) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"read");
    }
    /**
     * {@snippet :
     * ssize_t read(int, void*, size_t);
     * }
     */
    public static long read(int x0, MemorySegment x1, long x2) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"rmdir");
    }
    /**
     * {@snippet :
     * int rmdir(char*);
     * }
     */
    public static int rmdir(MemorySegment x0) {
        var mh$ = rmdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"setgid");
    }
    /**
     * {@snippet :
     * int setgid(gid_t);
     * }
     */
    public static int setgid(int x0) {
        var mh$ = setgid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"setpgid");
    }
    /**
     * {@snippet :
     * int setpgid(pid_t, pid_t);
     * }
     */
    public static int setpgid(int x0, int x1) {
        var mh$ = setpgid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"setsid");
    }
    /**
     * {@snippet :
     * pid_t setsid();
     * }
     */
    public static int setsid() {
        var mh$ = setsid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"setuid");
    }
    /**
     * {@snippet :
     * int setuid(uid_t);
     * }
     */
    public static int setuid(int x0) {
        var mh$ = setuid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"sleep");
    }
    /**
     * {@snippet :
     * unsigned int sleep(unsigned int);
     * }
     */
    public static int sleep(int x0) {
        var mh$ = sleep$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"sysconf");
    }
    /**
     * {@snippet :
     * long sysconf(int);
     * }
     */
    public static long sysconf(int x0) {
        var mh$ = sysconf$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"tcgetpgrp");
    }
    /**
     * {@snippet :
     * pid_t tcgetpgrp(int);
     * }
     */
    public static int tcgetpgrp(int x0) {
        var mh$ = tcgetpgrp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"tcsetpgrp");
    }
    /**
     * {@snippet :
     * int tcsetpgrp(int, pid_t);
     * }
     */
    public static int tcsetpgrp(int x0, int x1) {
        var mh$ = tcsetpgrp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"ttyname");
    }
    /**
     * {@snippet :
     * char* ttyname(int);
     * }
     */
    public static MemorySegment ttyname(int x0) {
        var mh$ = ttyname$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"ttyname_r");
    }
    /**
     * {@snippet :
     * int ttyname_r(int, char*, size_t);
     * }
     */
    public static int ttyname_r(int x0, MemorySegment x1, long x2) {
        var mh$ = ttyname_r$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"unlink");
    }
    /**
     * {@snippet :
     * int unlink(char*);
     * }
     */
    public static int unlink(MemorySegment x0) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"write");
    }
    /**
     * {@snippet :
     * ssize_t write(int __fd, void* __buf, size_t __nbyte);
     * }
     */
    public static long write(int __fd, MemorySegment __buf, long __nbyte) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbyte);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"confstr");
    }
    /**
     * {@snippet :
     * size_t confstr(int, char*, size_t);
     * }
     */
    public static long confstr(int x0, MemorySegment x1, long x2) {
        var mh$ = confstr$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"getopt");
    }
    /**
     * {@snippet :
     * int getopt(int, char* [], char*);
     * }
     */
    public static int getopt(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = getopt$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle optarg$VH() {
        return constants$34.const$0;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"optarg");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char* optarg;
     * }
     */
    public static MemorySegment optarg$get() {
        return (MemorySegment) constants$34.const$0.get(RuntimeHelper.requireNonNull(constants$34.const$1, "optarg"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char* optarg;
     * }
     */
    public static void optarg$set(MemorySegment x) {
        constants$34.const$0.set(RuntimeHelper.requireNonNull(constants$34.const$1, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle optind$VH() {
        return constants$34.const$2;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"optind");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optind;
     * }
     */
    public static int optind$get() {
        return (int) constants$34.const$2.get(RuntimeHelper.requireNonNull(constants$34.const$3, "optind"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optind;
     * }
     */
    public static void optind$set(int x) {
        constants$34.const$2.set(RuntimeHelper.requireNonNull(constants$34.const$3, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle opterr$VH() {
        return constants$34.const$2;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"opterr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int opterr;
     * }
     */
    public static int opterr$get() {
        return (int) constants$34.const$2.get(RuntimeHelper.requireNonNull(constants$34.const$4, "opterr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int opterr;
     * }
     */
    public static void opterr$set(int x) {
        constants$34.const$2.set(RuntimeHelper.requireNonNull(constants$34.const$4, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle optopt$VH() {
        return constants$34.const$2;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"optopt");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optopt;
     * }
     */
    public static int optopt$get() {
        return (int) constants$34.const$2.get(RuntimeHelper.requireNonNull(constants$34.const$5, "optopt"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optopt;
     * }
     */
    public static void optopt$set(int x) {
        constants$34.const$2.set(RuntimeHelper.requireNonNull(constants$34.const$5, "optopt"), x);
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char*);
     * }
     */
    public static MemorySegment ctermid(MemorySegment x0) {
        var mh$ = ctermid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"brk");
    }
    /**
     * {@snippet :
     * void* brk(void*);
     * }
     */
    public static MemorySegment brk(MemorySegment x0) {
        var mh$ = brk$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"chroot");
    }
    /**
     * {@snippet :
     * int chroot(char*);
     * }
     */
    public static int chroot(MemorySegment x0) {
        var mh$ = chroot$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"crypt");
    }
    /**
     * {@snippet :
     * char* crypt(char*, char*);
     * }
     */
    public static MemorySegment crypt(MemorySegment x0, MemorySegment x1) {
        var mh$ = crypt$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle encrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"encrypt");
    }
    /**
     * {@snippet :
     * void encrypt(char*, int);
     * }
     */
    public static void encrypt(MemorySegment x0, int x1) {
        var mh$ = encrypt$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"fchdir");
    }
    /**
     * {@snippet :
     * int fchdir(int);
     * }
     */
    public static int fchdir(int x0) {
        var mh$ = fchdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"gethostid");
    }
    /**
     * {@snippet :
     * long gethostid();
     * }
     */
    public static long gethostid() {
        var mh$ = gethostid$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"getpgid");
    }
    /**
     * {@snippet :
     * pid_t getpgid(pid_t);
     * }
     */
    public static int getpgid(int x0) {
        var mh$ = getpgid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"getsid");
    }
    /**
     * {@snippet :
     * pid_t getsid(pid_t);
     * }
     */
    public static int getsid(int x0) {
        var mh$ = getsid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"getdtablesize");
    }
    /**
     * {@snippet :
     * int getdtablesize();
     * }
     */
    public static int getdtablesize() {
        var mh$ = getdtablesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"getpagesize");
    }
    /**
     * {@snippet :
     * int getpagesize();
     * }
     */
    public static int getpagesize() {
        var mh$ = getpagesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"getpass");
    }
    /**
     * {@snippet :
     * char* getpass(char*);
     * }
     */
    public static MemorySegment getpass(MemorySegment x0) {
        var mh$ = getpass$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"getwd");
    }
    /**
     * {@snippet :
     * char* getwd(char*);
     * }
     */
    public static MemorySegment getwd(MemorySegment x0) {
        var mh$ = getwd$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"lchown");
    }
    /**
     * {@snippet :
     * int lchown(char*, uid_t, gid_t);
     * }
     */
    public static int lchown(MemorySegment x0, int x1, int x2) {
        var mh$ = lchown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"lockf");
    }
    /**
     * {@snippet :
     * int lockf(int, int, off_t);
     * }
     */
    public static int lockf(int x0, int x1, long x2) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"nice");
    }
    /**
     * {@snippet :
     * int nice(int);
     * }
     */
    public static int nice(int x0) {
        var mh$ = nice$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"pread");
    }
    /**
     * {@snippet :
     * ssize_t pread(int __fd, void* __buf, size_t __nbyte, off_t __offset);
     * }
     */
    public static long pread(int __fd, MemorySegment __buf, long __nbyte, long __offset) {
        var mh$ = pread$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbyte, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"pwrite");
    }
    /**
     * {@snippet :
     * ssize_t pwrite(int __fd, void* __buf, size_t __nbyte, off_t __offset);
     * }
     */
    public static long pwrite(int __fd, MemorySegment __buf, long __nbyte, long __offset) {
        var mh$ = pwrite$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbyte, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"sbrk");
    }
    /**
     * {@snippet :
     * void* sbrk(int);
     * }
     */
    public static MemorySegment sbrk(int x0) {
        var mh$ = sbrk$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"setpgrp");
    }
    /**
     * {@snippet :
     * pid_t setpgrp();
     * }
     */
    public static int setpgrp() {
        var mh$ = setpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"setregid");
    }
    /**
     * {@snippet :
     * int setregid(gid_t, gid_t);
     * }
     */
    public static int setregid(int x0, int x1) {
        var mh$ = setregid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"setreuid");
    }
    /**
     * {@snippet :
     * int setreuid(uid_t, uid_t);
     * }
     */
    public static int setreuid(int x0, int x1) {
        var mh$ = setreuid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"sync");
    }
    /**
     * {@snippet :
     * void sync();
     * }
     */
    public static void sync() {
        var mh$ = sync$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"truncate");
    }
    /**
     * {@snippet :
     * int truncate(char*, off_t);
     * }
     */
    public static int truncate(MemorySegment x0, long x1) {
        var mh$ = truncate$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"ualarm");
    }
    /**
     * {@snippet :
     * useconds_t ualarm(useconds_t, useconds_t);
     * }
     */
    public static int ualarm(int x0, int x1) {
        var mh$ = ualarm$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"usleep");
    }
    /**
     * {@snippet :
     * int usleep(useconds_t);
     * }
     */
    public static int usleep(int x0) {
        var mh$ = usleep$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"vfork");
    }
    /**
     * {@snippet :
     * int vfork();
     * }
     */
    public static int vfork() {
        var mh$ = vfork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"fsync");
    }
    /**
     * {@snippet :
     * int fsync(int);
     * }
     */
    public static int fsync(int x0) {
        var mh$ = fsync$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"ftruncate");
    }
    /**
     * {@snippet :
     * int ftruncate(int, off_t);
     * }
     */
    public static int ftruncate(int x0, long x1) {
        var mh$ = ftruncate$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"getlogin_r");
    }
    /**
     * {@snippet :
     * int getlogin_r(char*, size_t);
     * }
     */
    public static int getlogin_r(MemorySegment x0, long x1) {
        var mh$ = getlogin_r$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"fchown");
    }
    /**
     * {@snippet :
     * int fchown(int, uid_t, gid_t);
     * }
     */
    public static int fchown(int x0, int x1, int x2) {
        var mh$ = fchown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"gethostname");
    }
    /**
     * {@snippet :
     * int gethostname(char*, size_t);
     * }
     */
    public static int gethostname(MemorySegment x0, long x1) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"readlink");
    }
    /**
     * {@snippet :
     * ssize_t readlink(char*, char*, size_t);
     * }
     */
    public static long readlink(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = readlink$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"setegid");
    }
    /**
     * {@snippet :
     * int setegid(gid_t);
     * }
     */
    public static int setegid(int x0) {
        var mh$ = setegid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"seteuid");
    }
    /**
     * {@snippet :
     * int seteuid(uid_t);
     * }
     */
    public static int seteuid(int x0) {
        var mh$ = seteuid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"symlink");
    }
    /**
     * {@snippet :
     * int symlink(char*, char*);
     * }
     */
    public static int symlink(MemorySegment x0, MemorySegment x1) {
        var mh$ = symlink$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __darwin_check_fd_set_overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"__darwin_check_fd_set_overflow");
    }
    /**
     * {@snippet :
     * int __darwin_check_fd_set_overflow(int, void*, int);
     * }
     */
    public static int __darwin_check_fd_set_overflow(int x0, MemorySegment x1, int x2) {
        var mh$ = __darwin_check_fd_set_overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int suseconds_t;
     * }
     */
    public static final OfInt suseconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int sigset_t;
     * }
     */
    public static final OfInt sigset_t = JAVA_INT;
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int, fd_set*, fd_set*, fd_set*, struct timespec*, const sigset_t*);
     * }
     */
    public static int pselect(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$6,"select");
    }
    /**
     * {@snippet :
     * int select(int, fd_set*, fd_set*, fd_set*, struct timeval*);
     * }
     */
    public static int select(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int dev_t;
     * }
     */
    public static final OfInt dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short mode_t;
     * }
     */
    public static final OfShort mode_t = JAVA_SHORT;
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int);
     * }
     */
    public static void _Exit(int x0) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accessx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"accessx_np");
    }
    /**
     * {@snippet :
     * int accessx_np(struct accessx_descriptor*, size_t, int*, uid_t);
     * }
     */
    public static int accessx_np(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = accessx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"acct");
    }
    /**
     * {@snippet :
     * int acct(char*);
     * }
     */
    public static int acct(MemorySegment x0) {
        var mh$ = acct$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle add_profil$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"add_profil");
    }
    /**
     * {@snippet :
     * int add_profil(char*, size_t, unsigned long, unsigned int);
     * }
     */
    public static int add_profil(MemorySegment x0, long x1, long x2, int x3) {
        var mh$ = add_profil$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0,"endusershell");
    }
    /**
     * {@snippet :
     * void endusershell();
     * }
     */
    public static void endusershell() {
        var mh$ = endusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvP$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"execvP");
    }
    /**
     * {@snippet :
     * int execvP(char* __file, char* __searchpath, char** __argv);
     * }
     */
    public static int execvP(MemorySegment __file, MemorySegment __searchpath, MemorySegment __argv) {
        var mh$ = execvP$MH();
        try {
            return (int)mh$.invokeExact(__file, __searchpath, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflagstostr$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"fflagstostr");
    }
    /**
     * {@snippet :
     * char* fflagstostr(unsigned long);
     * }
     */
    public static MemorySegment fflagstostr(long x0) {
        var mh$ = fflagstostr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"getdomainname");
    }
    /**
     * {@snippet :
     * int getdomainname(char*, int);
     * }
     */
    public static int getdomainname(MemorySegment x0, int x1) {
        var mh$ = getdomainname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgrouplist$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$6,"getgrouplist");
    }
    /**
     * {@snippet :
     * int getgrouplist(char*, int, int*, int*);
     * }
     */
    public static int getgrouplist(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = getgrouplist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostuuid$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"gethostuuid");
    }
    /**
     * {@snippet :
     * int gethostuuid(uuid_t, struct timespec*);
     * }
     */
    public static int gethostuuid(MemorySegment x0, MemorySegment x1) {
        var mh$ = gethostuuid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getmode$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"getmode");
    }
    /**
     * {@snippet :
     * mode_t getmode(void*, mode_t);
     * }
     */
    public static short getmode(MemorySegment x0, short x1) {
        var mh$ = getmode$MH();
        try {
            return (short)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeereid$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"getpeereid");
    }
    /**
     * {@snippet :
     * int getpeereid(int, uid_t*, gid_t*);
     * }
     */
    public static int getpeereid(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = getpeereid$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"getsgroups_np");
    }
    /**
     * {@snippet :
     * int getsgroups_np(int*, uuid_t);
     * }
     */
    public static int getsgroups_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = getsgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"getusershell");
    }
    /**
     * {@snippet :
     * char* getusershell();
     * }
     */
    public static MemorySegment getusershell() {
        var mh$ = getusershell$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"getwgroups_np");
    }
    /**
     * {@snippet :
     * int getwgroups_np(int*, uuid_t);
     * }
     */
    public static int getwgroups_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = getwgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"initgroups");
    }
    /**
     * {@snippet :
     * int initgroups(char*, int);
     * }
     */
    public static int initgroups(MemorySegment x0, int x1) {
        var mh$ = initgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle issetugid$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"issetugid");
    }
    /**
     * {@snippet :
     * int issetugid();
     * }
     */
    public static int issetugid() {
        var mh$ = issetugid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char*);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment x0) {
        var mh$ = mkdtemp$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"mknod");
    }
    /**
     * {@snippet :
     * int mknod(char*, mode_t, dev_t);
     * }
     */
    public static int mknod(MemorySegment x0, short x1, int x2) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkpath_np$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"mkpath_np");
    }
    /**
     * {@snippet :
     * int mkpath_np(char* path, mode_t omode);
     * }
     */
    public static int mkpath_np(MemorySegment path, short omode) {
        var mh$ = mkpath_np$MH();
        try {
            return (int)mh$.invokeExact(path, omode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkpathat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"mkpathat_np");
    }
    /**
     * {@snippet :
     * int mkpathat_np(int dfd, char* path, mode_t omode);
     * }
     */
    public static int mkpathat_np(int dfd, MemorySegment path, short omode) {
        var mh$ = mkpathat_np$MH();
        try {
            return (int)mh$.invokeExact(dfd, path, omode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char*);
     * }
     */
    public static int mkstemp(MemorySegment x0) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char*, int);
     * }
     */
    public static int mkstemps(MemorySegment x0, int x1) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char*);
     * }
     */
    public static MemorySegment mktemp(MemorySegment x0) {
        var mh$ = mktemp$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkostemp$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"mkostemp");
    }
    /**
     * {@snippet :
     * int mkostemp(char* path, int oflags);
     * }
     */
    public static int mkostemp(MemorySegment path, int oflags) {
        var mh$ = mkostemp$MH();
        try {
            return (int)mh$.invokeExact(path, oflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkostemps$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"mkostemps");
    }
    /**
     * {@snippet :
     * int mkostemps(char* path, int slen, int oflags);
     * }
     */
    public static int mkostemps(MemorySegment path, int slen, int oflags) {
        var mh$ = mkostemps$MH();
        try {
            return (int)mh$.invokeExact(path, slen, oflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp_dprotected_np$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"mkstemp_dprotected_np");
    }
    /**
     * {@snippet :
     * int mkstemp_dprotected_np(char* path, int dpclass, int dpflags);
     * }
     */
    public static int mkstemp_dprotected_np(MemorySegment path, int dpclass, int dpflags) {
        var mh$ = mkstemp_dprotected_np$MH();
        try {
            return (int)mh$.invokeExact(path, dpclass, dpflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtempat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"mkdtempat_np");
    }
    /**
     * {@snippet :
     * char* mkdtempat_np(int dfd, char* path);
     * }
     */
    public static MemorySegment mkdtempat_np(int dfd, MemorySegment path) {
        var mh$ = mkdtempat_np$MH();
        try {
            return (MemorySegment)mh$.invokeExact(dfd, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstempsat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"mkstempsat_np");
    }
    /**
     * {@snippet :
     * int mkstempsat_np(int dfd, char* path, int slen);
     * }
     */
    public static int mkstempsat_np(int dfd, MemorySegment path, int slen) {
        var mh$ = mkstempsat_np$MH();
        try {
            return (int)mh$.invokeExact(dfd, path, slen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkostempsat_np$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"mkostempsat_np");
    }
    /**
     * {@snippet :
     * int mkostempsat_np(int dfd, char* path, int slen, int oflags);
     * }
     */
    public static int mkostempsat_np(int dfd, MemorySegment path, int slen, int oflags) {
        var mh$ = mkostempsat_np$MH();
        try {
            return (int)mh$.invokeExact(dfd, path, slen, oflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nfssvc$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"nfssvc");
    }
    /**
     * {@snippet :
     * int nfssvc(int, void*);
     * }
     */
    public static int nfssvc(int x0, MemorySegment x1) {
        var mh$ = nfssvc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"profil");
    }
    /**
     * {@snippet :
     * int profil(char*, size_t, unsigned long, unsigned int);
     * }
     */
    public static int profil(MemorySegment x0, long x1, long x2, int x3) {
        var mh$ = profil$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setugid_np$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"pthread_setugid_np");
    }
    /**
     * {@snippet :
     * int pthread_setugid_np(uid_t, gid_t);
     * }
     */
    public static int pthread_setugid_np(int x0, int x1) {
        var mh$ = pthread_setugid_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getugid_np$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"pthread_getugid_np");
    }
    /**
     * {@snippet :
     * int pthread_getugid_np(uid_t*, gid_t*);
     * }
     */
    public static int pthread_getugid_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = pthread_getugid_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reboot$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"reboot");
    }
    /**
     * {@snippet :
     * int reboot(int);
     * }
     */
    public static int reboot(int x0) {
        var mh$ = reboot$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"revoke");
    }
    /**
     * {@snippet :
     * int revoke(char*);
     * }
     */
    public static int revoke(MemorySegment x0) {
        var mh$ = revoke$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcmd$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"rcmd");
    }
    /**
     * {@snippet :
     * int rcmd(char**, int, char*, char*, char*, int*);
     * }
     */
    public static int rcmd(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = rcmd$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rcmd_af$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"rcmd_af");
    }
    /**
     * {@snippet :
     * int rcmd_af(char**, int, char*, char*, char*, int*, int);
     * }
     */
    public static int rcmd_af(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, int x6) {
        var mh$ = rcmd_af$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rresvport$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"rresvport");
    }
    /**
     * {@snippet :
     * int rresvport(int*);
     * }
     */
    public static int rresvport(MemorySegment x0) {
        var mh$ = rresvport$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rresvport_af$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"rresvport_af");
    }
    /**
     * {@snippet :
     * int rresvport_af(int*, int);
     * }
     */
    public static int rresvport_af(MemorySegment x0, int x1) {
        var mh$ = rresvport_af$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iruserok$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"iruserok");
    }
    /**
     * {@snippet :
     * int iruserok(unsigned long, int, char*, char*);
     * }
     */
    public static int iruserok(long x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = iruserok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iruserok_sa$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"iruserok_sa");
    }
    /**
     * {@snippet :
     * int iruserok_sa(void*, int, int, char*, char*);
     * }
     */
    public static int iruserok_sa(MemorySegment x0, int x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = iruserok_sa$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ruserok$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"ruserok");
    }
    /**
     * {@snippet :
     * int ruserok(char*, int, char*, char*);
     * }
     */
    public static int ruserok(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = ruserok$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"setdomainname");
    }
    /**
     * {@snippet :
     * int setdomainname(char*, int);
     * }
     */
    public static int setdomainname(MemorySegment x0, int x1) {
        var mh$ = setdomainname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"setgroups");
    }
    /**
     * {@snippet :
     * int setgroups(int, const gid_t*);
     * }
     */
    public static int setgroups(int x0, MemorySegment x1) {
        var mh$ = setgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"sethostid");
    }
    /**
     * {@snippet :
     * void sethostid(long);
     * }
     */
    public static void sethostid(long x0) {
        var mh$ = sethostid$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"sethostname");
    }
    /**
     * {@snippet :
     * int sethostname(char*, int);
     * }
     */
    public static int sethostname(MemorySegment x0, int x1) {
        var mh$ = sethostname$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setkey$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"setkey");
    }
    /**
     * {@snippet :
     * void setkey(char*);
     * }
     */
    public static void setkey(MemorySegment x0) {
        var mh$ = setkey$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"setlogin");
    }
    /**
     * {@snippet :
     * int setlogin(char*);
     * }
     */
    public static int setlogin(MemorySegment x0) {
        var mh$ = setlogin$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setmode$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"setmode");
    }
    /**
     * {@snippet :
     * void* setmode(char*);
     * }
     */
    public static MemorySegment setmode(MemorySegment x0) {
        var mh$ = setmode$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setrgid$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"setrgid");
    }
    /**
     * {@snippet :
     * int setrgid(gid_t);
     * }
     */
    public static int setrgid(int x0) {
        var mh$ = setrgid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setruid$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"setruid");
    }
    /**
     * {@snippet :
     * int setruid(uid_t);
     * }
     */
    public static int setruid(int x0) {
        var mh$ = setruid$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"setsgroups_np");
    }
    /**
     * {@snippet :
     * int setsgroups_np(int, const uuid_t);
     * }
     */
    public static int setsgroups_np(int x0, MemorySegment x1) {
        var mh$ = setsgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"setusershell");
    }
    /**
     * {@snippet :
     * void setusershell();
     * }
     */
    public static void setusershell() {
        var mh$ = setusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setwgroups_np$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"setwgroups_np");
    }
    /**
     * {@snippet :
     * int setwgroups_np(int, const uuid_t);
     * }
     */
    public static int setwgroups_np(int x0, MemorySegment x1) {
        var mh$ = setwgroups_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtofflags$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"strtofflags");
    }
    /**
     * {@snippet :
     * int strtofflags(char**, unsigned long*, unsigned long*);
     * }
     */
    public static int strtofflags(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = strtofflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swapon$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"swapon");
    }
    /**
     * {@snippet :
     * int swapon(char*);
     * }
     */
    public static int swapon(MemorySegment x0) {
        var mh$ = swapon$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"ttyslot");
    }
    /**
     * {@snippet :
     * int ttyslot();
     * }
     */
    public static int ttyslot() {
        var mh$ = ttyslot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle undelete$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"undelete");
    }
    /**
     * {@snippet :
     * int undelete(char*);
     * }
     */
    public static int undelete(MemorySegment x0) {
        var mh$ = undelete$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unwhiteout$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"unwhiteout");
    }
    /**
     * {@snippet :
     * int unwhiteout(char*);
     * }
     */
    public static int unwhiteout(MemorySegment x0) {
        var mh$ = unwhiteout$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(size_t);
     * }
     */
    public static MemorySegment valloc(long x0) {
        var mh$ = valloc$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"syscall");
    }
    /**
     * {@snippet :
     * int syscall(int,...);
     * }
     */
    public static int syscall(int x0, Object... x1) {
        var mh$ = syscall$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout suboptarg$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle suboptarg$VH() {
        return constants$34.const$0;
    }
    public static MemorySegment suboptarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"suboptarg");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * char* suboptarg;
     * }
     */
    public static MemorySegment suboptarg$get() {
        return (MemorySegment) constants$34.const$0.get(RuntimeHelper.requireNonNull(constants$56.const$3, "suboptarg"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * char* suboptarg;
     * }
     */
    public static void suboptarg$set(MemorySegment x) {
        constants$34.const$0.set(RuntimeHelper.requireNonNull(constants$56.const$3, "suboptarg"), x);
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char**, char**, char**);
     * }
     */
    public static int getsubopt(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$6,"fgetattrlist");
    }
    /**
     * {@snippet :
     * int fgetattrlist(int, void*, void*, size_t, unsigned int);
     * }
     */
    public static int fgetattrlist(int x0, MemorySegment x1, MemorySegment x2, long x3, int x4) {
        var mh$ = fgetattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"fsetattrlist");
    }
    /**
     * {@snippet :
     * int fsetattrlist(int, void*, void*, size_t, unsigned int);
     * }
     */
    public static int fsetattrlist(int x0, MemorySegment x1, MemorySegment x2, long x3, int x4) {
        var mh$ = fsetattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"getattrlist");
    }
    /**
     * {@snippet :
     * int getattrlist(char*, void*, void*, size_t, unsigned int);
     * }
     */
    public static int getattrlist(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3, int x4) {
        var mh$ = getattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setattrlist$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"setattrlist");
    }
    /**
     * {@snippet :
     * int setattrlist(char*, void*, void*, size_t, unsigned int);
     * }
     */
    public static int setattrlist(MemorySegment x0, MemorySegment x1, MemorySegment x2, long x3, int x4) {
        var mh$ = setattrlist$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exchangedata$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"exchangedata");
    }
    /**
     * {@snippet :
     * int exchangedata(char*, char*, unsigned int);
     * }
     */
    public static int exchangedata(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = exchangedata$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdirentriesattr$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"getdirentriesattr");
    }
    /**
     * {@snippet :
     * int getdirentriesattr(int, void*, void*, size_t, unsigned int*, unsigned int*, unsigned int*, unsigned int);
     * }
     */
    public static int getdirentriesattr(int x0, MemorySegment x1, MemorySegment x2, long x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, int x7) {
        var mh$ = getdirentriesattr$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle searchfs$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"searchfs");
    }
    /**
     * {@snippet :
     * int searchfs(char*, struct fssearchblock*, unsigned long*, unsigned int, unsigned int, struct searchstate*);
     * }
     */
    public static int searchfs(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, int x4, MemorySegment x5) {
        var mh$ = searchfs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsctl$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"fsctl");
    }
    /**
     * {@snippet :
     * int fsctl(char*, unsigned long, void*, unsigned int);
     * }
     */
    public static int fsctl(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = fsctl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsctl$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$6,"ffsctl");
    }
    /**
     * {@snippet :
     * int ffsctl(int, unsigned long, void*, unsigned int);
     * }
     */
    public static int ffsctl(int x0, long x1, MemorySegment x2, int x3) {
        var mh$ = ffsctl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync_volume_np$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"fsync_volume_np");
    }
    /**
     * {@snippet :
     * int fsync_volume_np(int, int);
     * }
     */
    public static int fsync_volume_np(int x0, int x1) {
        var mh$ = fsync_volume_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync_volume_np$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"sync_volume_np");
    }
    /**
     * {@snippet :
     * int sync_volume_np(char*, int);
     * }
     */
    public static int sync_volume_np(MemorySegment x0, int x1) {
        var mh$ = sync_volume_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optreset$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle optreset$VH() {
        return constants$34.const$2;
    }
    public static MemorySegment optreset$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"optreset");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int optreset;
     * }
     */
    public static int optreset$get() {
        return (int) constants$34.const$2.get(RuntimeHelper.requireNonNull(constants$59.const$2, "optreset"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int optreset;
     * }
     */
    public static void optreset$set(int x) {
        constants$34.const$2.set(RuntimeHelper.requireNonNull(constants$59.const$2, "optreset"), x);
    }
    /**
     * {@snippet :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$59.const$3;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NULL 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return constants$59.const$4;
    }
    /**
     * {@snippet :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define __MAC_OS_X_VERSION_MIN_REQUIRED 130000
     * }
     */
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 130300
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$59.const$4;
    }
    /**
     * {@snippet :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define EWOULDBLOCK 35
     * }
     */
    public static int EWOULDBLOCK() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define IOCPARM_MAX 8192
     * }
     */
    public static int IOCPARM_MAX() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define IOC_VOID 536870912
     * }
     */
    public static int IOC_VOID() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define IOC_OUT 1073741824
     * }
     */
    public static int IOC_OUT() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define IOC_IN 2147483648
     * }
     */
    public static int IOC_IN() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define IOC_INOUT 3221225472
     * }
     */
    public static int IOC_INOUT() {
        return (int)3221225472L;
    }
    /**
     * {@snippet :
     * #define IOC_DIRMASK 3758096384
     * }
     */
    public static int IOC_DIRMASK() {
        return (int)3758096384L;
    }
    /**
     * {@snippet :
     * #define TIOCMODG 1074033667
     * }
     */
    public static long TIOCMODG() {
        return 1074033667L;
    }
    /**
     * {@snippet :
     * #define TIOCMODS 2147775492
     * }
     */
    public static long TIOCMODS() {
        return 2147775492L;
    }
    /**
     * {@snippet :
     * #define TIOCM_CD 64
     * }
     */
    public static int TIOCM_CD() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define TIOCM_RI 128
     * }
     */
    public static int TIOCM_RI() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define TIOCEXCL 536900621
     * }
     */
    public static int TIOCEXCL() {
        return (int)536900621L;
    }
    /**
     * {@snippet :
     * #define TIOCNXCL 536900622
     * }
     */
    public static int TIOCNXCL() {
        return (int)536900622L;
    }
    /**
     * {@snippet :
     * #define TIOCFLUSH 2147775504
     * }
     */
    public static long TIOCFLUSH() {
        return 2147775504L;
    }
    /**
     * {@snippet :
     * #define TIOCGETD 1074033690
     * }
     */
    public static long TIOCGETD() {
        return 1074033690L;
    }
    /**
     * {@snippet :
     * #define TIOCSETD 2147775515
     * }
     */
    public static long TIOCSETD() {
        return 2147775515L;
    }
    /**
     * {@snippet :
     * #define TIOCIXON 536900737
     * }
     */
    public static int TIOCIXON() {
        return (int)536900737L;
    }
    /**
     * {@snippet :
     * #define TIOCIXOFF 536900736
     * }
     */
    public static int TIOCIXOFF() {
        return (int)536900736L;
    }
    /**
     * {@snippet :
     * #define TIOCSBRK 536900731
     * }
     */
    public static int TIOCSBRK() {
        return (int)536900731L;
    }
    /**
     * {@snippet :
     * #define TIOCCBRK 536900730
     * }
     */
    public static int TIOCCBRK() {
        return (int)536900730L;
    }
    /**
     * {@snippet :
     * #define TIOCSDTR 536900729
     * }
     */
    public static int TIOCSDTR() {
        return (int)536900729L;
    }
    /**
     * {@snippet :
     * #define TIOCCDTR 536900728
     * }
     */
    public static int TIOCCDTR() {
        return (int)536900728L;
    }
    /**
     * {@snippet :
     * #define TIOCGPGRP 1074033783
     * }
     */
    public static long TIOCGPGRP() {
        return 1074033783L;
    }
    /**
     * {@snippet :
     * #define TIOCSPGRP 2147775606
     * }
     */
    public static long TIOCSPGRP() {
        return 2147775606L;
    }
    /**
     * {@snippet :
     * #define TIOCOUTQ 1074033779
     * }
     */
    public static long TIOCOUTQ() {
        return 1074033779L;
    }
    /**
     * {@snippet :
     * #define TIOCSTI 2147578994
     * }
     */
    public static long TIOCSTI() {
        return 2147578994L;
    }
    /**
     * {@snippet :
     * #define TIOCNOTTY 536900721
     * }
     */
    public static int TIOCNOTTY() {
        return (int)536900721L;
    }
    /**
     * {@snippet :
     * #define TIOCPKT 2147775600
     * }
     */
    public static long TIOCPKT() {
        return 2147775600L;
    }
    /**
     * {@snippet :
     * #define TIOCSTOP 536900719
     * }
     */
    public static int TIOCSTOP() {
        return (int)536900719L;
    }
    /**
     * {@snippet :
     * #define TIOCSTART 536900718
     * }
     */
    public static int TIOCSTART() {
        return (int)536900718L;
    }
    /**
     * {@snippet :
     * #define TIOCMSET 2147775597
     * }
     */
    public static long TIOCMSET() {
        return 2147775597L;
    }
    /**
     * {@snippet :
     * #define TIOCMBIS 2147775596
     * }
     */
    public static long TIOCMBIS() {
        return 2147775596L;
    }
    /**
     * {@snippet :
     * #define TIOCMBIC 2147775595
     * }
     */
    public static long TIOCMBIC() {
        return 2147775595L;
    }
    /**
     * {@snippet :
     * #define TIOCMGET 1074033770
     * }
     */
    public static long TIOCMGET() {
        return 1074033770L;
    }
    /**
     * {@snippet :
     * #define TIOCGWINSZ 1074295912
     * }
     */
    public static long TIOCGWINSZ() {
        return 1074295912L;
    }
    /**
     * {@snippet :
     * #define TIOCSWINSZ 2148037735
     * }
     */
    public static long TIOCSWINSZ() {
        return 2148037735L;
    }
    /**
     * {@snippet :
     * #define TIOCUCNTL 2147775590
     * }
     */
    public static long TIOCUCNTL() {
        return 2147775590L;
    }
    /**
     * {@snippet :
     * #define TIOCSTAT 536900709
     * }
     */
    public static int TIOCSTAT() {
        return (int)536900709L;
    }
    /**
     * {@snippet :
     * #define TIOCSCONS 536900707
     * }
     */
    public static int TIOCSCONS() {
        return (int)536900707L;
    }
    /**
     * {@snippet :
     * #define TIOCCONS 2147775586
     * }
     */
    public static long TIOCCONS() {
        return 2147775586L;
    }
    /**
     * {@snippet :
     * #define TIOCSCTTY 536900705
     * }
     */
    public static int TIOCSCTTY() {
        return (int)536900705L;
    }
    /**
     * {@snippet :
     * #define TIOCEXT 2147775584
     * }
     */
    public static long TIOCEXT() {
        return 2147775584L;
    }
    /**
     * {@snippet :
     * #define TIOCSIG 536900703
     * }
     */
    public static int TIOCSIG() {
        return (int)536900703L;
    }
    /**
     * {@snippet :
     * #define TIOCDRAIN 536900702
     * }
     */
    public static int TIOCDRAIN() {
        return (int)536900702L;
    }
    /**
     * {@snippet :
     * #define TIOCMSDTRWAIT 2147775579
     * }
     */
    public static long TIOCMSDTRWAIT() {
        return 2147775579L;
    }
    /**
     * {@snippet :
     * #define TIOCMGDTRWAIT 1074033754
     * }
     */
    public static long TIOCMGDTRWAIT() {
        return 1074033754L;
    }
    /**
     * {@snippet :
     * #define TIOCTIMESTAMP 1074820185
     * }
     */
    public static long TIOCTIMESTAMP() {
        return 1074820185L;
    }
    /**
     * {@snippet :
     * #define TIOCDCDTIMESTAMP 1074820184
     * }
     */
    public static long TIOCDCDTIMESTAMP() {
        return 1074820184L;
    }
    /**
     * {@snippet :
     * #define TIOCSDRAINWAIT 2147775575
     * }
     */
    public static long TIOCSDRAINWAIT() {
        return 2147775575L;
    }
    /**
     * {@snippet :
     * #define TIOCGDRAINWAIT 1074033750
     * }
     */
    public static long TIOCGDRAINWAIT() {
        return 1074033750L;
    }
    /**
     * {@snippet :
     * #define TIOCDSIMICROCODE 536900693
     * }
     */
    public static int TIOCDSIMICROCODE() {
        return (int)536900693L;
    }
    /**
     * {@snippet :
     * #define TIOCPTYGRANT 536900692
     * }
     */
    public static int TIOCPTYGRANT() {
        return (int)536900692L;
    }
    /**
     * {@snippet :
     * #define TIOCPTYGNAME 1082160211
     * }
     */
    public static int TIOCPTYGNAME() {
        return (int)1082160211L;
    }
    /**
     * {@snippet :
     * #define TIOCPTYUNLK 536900690
     * }
     */
    public static int TIOCPTYUNLK() {
        return (int)536900690L;
    }
    /**
     * {@snippet :
     * #define TIOCGSIZE 1074295912
     * }
     */
    public static long TIOCGSIZE() {
        return 1074295912L;
    }
    /**
     * {@snippet :
     * #define TIOCSSIZE 2148037735
     * }
     */
    public static long TIOCSSIZE() {
        return 2148037735L;
    }
    /**
     * {@snippet :
     * #define FIOCLEX 536897025
     * }
     */
    public static int FIOCLEX() {
        return (int)536897025L;
    }
    /**
     * {@snippet :
     * #define FIONCLEX 536897026
     * }
     */
    public static int FIONCLEX() {
        return (int)536897026L;
    }
    /**
     * {@snippet :
     * #define FIONREAD 1074030207
     * }
     */
    public static long FIONREAD() {
        return 1074030207L;
    }
    /**
     * {@snippet :
     * #define FIONBIO 2147772030
     * }
     */
    public static long FIONBIO() {
        return 2147772030L;
    }
    /**
     * {@snippet :
     * #define FIOASYNC 2147772029
     * }
     */
    public static long FIOASYNC() {
        return 2147772029L;
    }
    /**
     * {@snippet :
     * #define FIOSETOWN 2147772028
     * }
     */
    public static long FIOSETOWN() {
        return 2147772028L;
    }
    /**
     * {@snippet :
     * #define FIOGETOWN 1074030203
     * }
     */
    public static long FIOGETOWN() {
        return 1074030203L;
    }
    /**
     * {@snippet :
     * #define FIODTYPE 1074030202
     * }
     */
    public static long FIODTYPE() {
        return 1074030202L;
    }
    /**
     * {@snippet :
     * #define SIOCSHIWAT 2147775232
     * }
     */
    public static long SIOCSHIWAT() {
        return 2147775232L;
    }
    /**
     * {@snippet :
     * #define SIOCGHIWAT 1074033409
     * }
     */
    public static long SIOCGHIWAT() {
        return 1074033409L;
    }
    /**
     * {@snippet :
     * #define SIOCSLOWAT 2147775234
     * }
     */
    public static long SIOCSLOWAT() {
        return 2147775234L;
    }
    /**
     * {@snippet :
     * #define SIOCGLOWAT 1074033411
     * }
     */
    public static long SIOCGLOWAT() {
        return 1074033411L;
    }
    /**
     * {@snippet :
     * #define SIOCATMARK 1074033415
     * }
     */
    public static long SIOCATMARK() {
        return 1074033415L;
    }
    /**
     * {@snippet :
     * #define SIOCSPGRP 2147775240
     * }
     */
    public static long SIOCSPGRP() {
        return 2147775240L;
    }
    /**
     * {@snippet :
     * #define SIOCGPGRP 1074033417
     * }
     */
    public static long SIOCGPGRP() {
        return 1074033417L;
    }
    /**
     * {@snippet :
     * #define _POSIX_VERSION 200112
     * }
     */
    public static long _POSIX_VERSION() {
        return 200112L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_VERSION 200112
     * }
     */
    public static long _POSIX2_VERSION() {
        return 200112L;
    }
    /**
     * {@snippet :
     * #define _POSIX_VDISABLE 255
     * }
     */
    public static byte _POSIX_VDISABLE() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define X_OK 1
     * }
     */
    public static int X_OK() {
        return (int)1L;
    }
}


