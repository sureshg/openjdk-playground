// Generated by jextract

package org.unix;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct winsize {
 *     unsigned short ws_row;
 *     unsigned short ws_col;
 *     unsigned short ws_xpixel;
 *     unsigned short ws_ypixel;
 * };
 * }
 */
public class winsize {

    public static MemoryLayout $LAYOUT() {
        return constants$18.const$2;
    }
    public static VarHandle ws_row$VH() {
        return constants$18.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ws_row;
     * }
     */
    public static short ws_row$get(MemorySegment seg) {
        return (short)constants$18.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ws_row;
     * }
     */
    public static void ws_row$set(MemorySegment seg, short x) {
        constants$18.const$3.set(seg, x);
    }
    public static short ws_row$get(MemorySegment seg, long index) {
        return (short)constants$18.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_row$set(MemorySegment seg, long index, short x) {
        constants$18.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ws_col$VH() {
        return constants$18.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ws_col;
     * }
     */
    public static short ws_col$get(MemorySegment seg) {
        return (short)constants$18.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ws_col;
     * }
     */
    public static void ws_col$set(MemorySegment seg, short x) {
        constants$18.const$4.set(seg, x);
    }
    public static short ws_col$get(MemorySegment seg, long index) {
        return (short)constants$18.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_col$set(MemorySegment seg, long index, short x) {
        constants$18.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ws_xpixel$VH() {
        return constants$18.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ws_xpixel;
     * }
     */
    public static short ws_xpixel$get(MemorySegment seg) {
        return (short)constants$18.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ws_xpixel;
     * }
     */
    public static void ws_xpixel$set(MemorySegment seg, short x) {
        constants$18.const$5.set(seg, x);
    }
    public static short ws_xpixel$get(MemorySegment seg, long index) {
        return (short)constants$18.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_xpixel$set(MemorySegment seg, long index, short x) {
        constants$18.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ws_ypixel$VH() {
        return constants$19.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ws_ypixel;
     * }
     */
    public static short ws_ypixel$get(MemorySegment seg) {
        return (short)constants$19.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ws_ypixel;
     * }
     */
    public static void ws_ypixel$set(MemorySegment seg, short x) {
        constants$19.const$0.set(seg, x);
    }
    public static short ws_ypixel$get(MemorySegment seg, long index) {
        return (short)constants$19.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ws_ypixel$set(MemorySegment seg, long index, short x) {
        constants$19.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


