// Generated by jextract

package org.unix;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
/**
 * {@snippet :
 * struct __darwin_pthread_handler_rec {
 *     void (*__routine)(void*);
 *     void* __arg;
 *     struct __darwin_pthread_handler_rec* __next;
 * };
 * }
 */
public class __darwin_pthread_handler_rec {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("__routine"),
        Constants$root.C_POINTER$LAYOUT.withName("__arg"),
        Constants$root.C_POINTER$LAYOUT.withName("__next")
    ).withName("__darwin_pthread_handler_rec");
    public static MemoryLayout $LAYOUT() {
        return __darwin_pthread_handler_rec.$struct$LAYOUT;
    }
    static final FunctionDescriptor __routine$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor __routine_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle __routine_UP$MH = RuntimeHelper.upcallHandle(__routine.class, "apply", __darwin_pthread_handler_rec.__routine_UP$FUNC);
    static final FunctionDescriptor __routine_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle __routine_DOWN$MH = RuntimeHelper.downcallHandle(
        __darwin_pthread_handler_rec.__routine_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*__routine)(void*);
     * }
     */
    public interface __routine {

        void apply(MemorySegment _x0);
        static MemorySegment allocate(__routine fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(__darwin_pthread_handler_rec.__routine_UP$MH, fi, __darwin_pthread_handler_rec.__routine$FUNC, scope);
        }
        static __routine ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (MemorySegment __x0) -> {
                try {
                    __darwin_pthread_handler_rec.__routine_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle __routine$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("__routine"));
    public static VarHandle __routine$VH() {
        return __darwin_pthread_handler_rec.__routine$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*__routine)(void*);
     * }
     */
    public static MemorySegment __routine$get(MemorySegment seg) {
        return (MemorySegment)__darwin_pthread_handler_rec.__routine$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*__routine)(void*);
     * }
     */
    public static void __routine$set(MemorySegment seg, MemorySegment x) {
        __darwin_pthread_handler_rec.__routine$VH.set(seg, x);
    }
    public static MemorySegment __routine$get(MemorySegment seg, long index) {
        return (MemorySegment)__darwin_pthread_handler_rec.__routine$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __routine$set(MemorySegment seg, long index, MemorySegment x) {
        __darwin_pthread_handler_rec.__routine$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static __routine __routine(MemorySegment segment, SegmentScope scope) {
        return __routine.ofAddress(__routine$get(segment), scope);
    }
    static final VarHandle __arg$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("__arg"));
    public static VarHandle __arg$VH() {
        return __darwin_pthread_handler_rec.__arg$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* __arg;
     * }
     */
    public static MemorySegment __arg$get(MemorySegment seg) {
        return (MemorySegment)__darwin_pthread_handler_rec.__arg$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* __arg;
     * }
     */
    public static void __arg$set(MemorySegment seg, MemorySegment x) {
        __darwin_pthread_handler_rec.__arg$VH.set(seg, x);
    }
    public static MemorySegment __arg$get(MemorySegment seg, long index) {
        return (MemorySegment)__darwin_pthread_handler_rec.__arg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __arg$set(MemorySegment seg, long index, MemorySegment x) {
        __darwin_pthread_handler_rec.__arg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __next$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("__next"));
    public static VarHandle __next$VH() {
        return __darwin_pthread_handler_rec.__next$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct __darwin_pthread_handler_rec* __next;
     * }
     */
    public static MemorySegment __next$get(MemorySegment seg) {
        return (MemorySegment)__darwin_pthread_handler_rec.__next$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct __darwin_pthread_handler_rec* __next;
     * }
     */
    public static void __next$set(MemorySegment seg, MemorySegment x) {
        __darwin_pthread_handler_rec.__next$VH.set(seg, x);
    }
    public static MemorySegment __next$get(MemorySegment seg, long index) {
        return (MemorySegment)__darwin_pthread_handler_rec.__next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __next$set(MemorySegment seg, long index, MemorySegment x) {
        __darwin_pthread_handler_rec.__next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


