// Generated by jextract

package org.unix;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

/**
 * {@snippet :
 * struct ttysize {
 *     unsigned short ts_lines;
 *     unsigned short ts_cols;
 *     unsigned short ts_xxx;
 *     unsigned short ts_yyy;
 * };
 * }
 */
public class ttysize {

    public static MemoryLayout $LAYOUT() {
        return constants$19.const$1;
    }
    public static VarHandle ts_lines$VH() {
        return constants$19.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_lines;
     * }
     */
    public static short ts_lines$get(MemorySegment seg) {
        return (short)constants$19.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_lines;
     * }
     */
    public static void ts_lines$set(MemorySegment seg, short x) {
        constants$19.const$2.set(seg, x);
    }
    public static short ts_lines$get(MemorySegment seg, long index) {
        return (short)constants$19.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_lines$set(MemorySegment seg, long index, short x) {
        constants$19.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ts_cols$VH() {
        return constants$19.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_cols;
     * }
     */
    public static short ts_cols$get(MemorySegment seg) {
        return (short)constants$19.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_cols;
     * }
     */
    public static void ts_cols$set(MemorySegment seg, short x) {
        constants$19.const$3.set(seg, x);
    }
    public static short ts_cols$get(MemorySegment seg, long index) {
        return (short)constants$19.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_cols$set(MemorySegment seg, long index, short x) {
        constants$19.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ts_xxx$VH() {
        return constants$19.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_xxx;
     * }
     */
    public static short ts_xxx$get(MemorySegment seg) {
        return (short)constants$19.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_xxx;
     * }
     */
    public static void ts_xxx$set(MemorySegment seg, short x) {
        constants$19.const$4.set(seg, x);
    }
    public static short ts_xxx$get(MemorySegment seg, long index) {
        return (short)constants$19.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_xxx$set(MemorySegment seg, long index, short x) {
        constants$19.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ts_yyy$VH() {
        return constants$19.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_yyy;
     * }
     */
    public static short ts_yyy$get(MemorySegment seg) {
        return (short)constants$19.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_yyy;
     * }
     */
    public static void ts_yyy$set(MemorySegment seg, short x) {
        constants$19.const$5.set(seg, x);
    }
    public static short ts_yyy$get(MemorySegment seg, long index) {
        return (short)constants$19.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_yyy$set(MemorySegment seg, long index, short x) {
        constants$19.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


