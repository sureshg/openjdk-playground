// Generated by jextract

package org.unix;

import java.lang.foreign.*;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.PathElement;
/**
 * {@snippet :
 * struct ttysize {
 *     unsigned short ts_lines;
 *     unsigned short ts_cols;
 *     unsigned short ts_xxx;
 *     unsigned short ts_yyy;
 * };
 * }
 */
public class ttysize {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("ts_lines"),
        Constants$root.C_SHORT$LAYOUT.withName("ts_cols"),
        Constants$root.C_SHORT$LAYOUT.withName("ts_xxx"),
        Constants$root.C_SHORT$LAYOUT.withName("ts_yyy")
    ).withName("ttysize");
    public static MemoryLayout $LAYOUT() {
        return ttysize.$struct$LAYOUT;
    }
    static final VarHandle ts_lines$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("ts_lines"));
    public static VarHandle ts_lines$VH() {
        return ttysize.ts_lines$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_lines;
     * }
     */
    public static short ts_lines$get(MemorySegment seg) {
        return (short)ttysize.ts_lines$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_lines;
     * }
     */
    public static void ts_lines$set(MemorySegment seg, short x) {
        ttysize.ts_lines$VH.set(seg, x);
    }
    public static short ts_lines$get(MemorySegment seg, long index) {
        return (short)ttysize.ts_lines$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_lines$set(MemorySegment seg, long index, short x) {
        ttysize.ts_lines$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ts_cols$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("ts_cols"));
    public static VarHandle ts_cols$VH() {
        return ttysize.ts_cols$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_cols;
     * }
     */
    public static short ts_cols$get(MemorySegment seg) {
        return (short)ttysize.ts_cols$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_cols;
     * }
     */
    public static void ts_cols$set(MemorySegment seg, short x) {
        ttysize.ts_cols$VH.set(seg, x);
    }
    public static short ts_cols$get(MemorySegment seg, long index) {
        return (short)ttysize.ts_cols$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_cols$set(MemorySegment seg, long index, short x) {
        ttysize.ts_cols$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ts_xxx$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("ts_xxx"));
    public static VarHandle ts_xxx$VH() {
        return ttysize.ts_xxx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_xxx;
     * }
     */
    public static short ts_xxx$get(MemorySegment seg) {
        return (short)ttysize.ts_xxx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_xxx;
     * }
     */
    public static void ts_xxx$set(MemorySegment seg, short x) {
        ttysize.ts_xxx$VH.set(seg, x);
    }
    public static short ts_xxx$get(MemorySegment seg, long index) {
        return (short)ttysize.ts_xxx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_xxx$set(MemorySegment seg, long index, short x) {
        ttysize.ts_xxx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ts_yyy$VH = $struct$LAYOUT.varHandle(PathElement.groupElement("ts_yyy"));
    public static VarHandle ts_yyy$VH() {
        return ttysize.ts_yyy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short ts_yyy;
     * }
     */
    public static short ts_yyy$get(MemorySegment seg) {
        return (short)ttysize.ts_yyy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short ts_yyy;
     * }
     */
    public static void ts_yyy$set(MemorySegment seg, short x) {
        ttysize.ts_yyy$VH.set(seg, x);
    }
    public static short ts_yyy$get(MemorySegment seg, long index) {
        return (short)ttysize.ts_yyy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ts_yyy$set(MemorySegment seg, long index, short x) {
        ttysize.ts_yyy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


